[
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "accept", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct sockaddr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t *", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "accept4", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct sockaddr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t *", 
                        "var": "addrlen"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* See NOTES */", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "accept"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "access", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "faccessat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "access"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "acct", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "acct"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "add_key", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "type"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "description"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "payload"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "plen"
                    }, 
                    {
                        "type": "key_serial_t", 
                        "var": "keyring"
                    }
                ], 
                "return_type": "key_serial_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "keyutils.h"
            }
        ], 
        "man_page": "add_key"
    }, 
    {
        "defines": [
            {
                "text": "_BSD_SOURCE      /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "adjtimex", 
                "parameters": [
                    {
                        "type": "struct timex *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/timex.h"
            }
        ], 
        "man_page": "adjtimex"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "alarm", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seconds"
                    }
                ], 
                "return_type": "unsigned int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "alarm"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "alloc_hugepages", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "key"
                    }, 
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "prot"
                    }, 
                    {
                        "type": "int", 
                        "var": "flag"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "free_hugepages", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "alloc_hugepages"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "arch_prctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "code"
                    }, 
                    {
                        "type": "unsigned long *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "int arch_prctl(int code, unsigned long addr); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "asm/prctl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/prctl.h"
            }
        ], 
        "man_page": "arch_prctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bdflush", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "func"
                    }, 
                    {
                        "type": "long", 
                        "var": "data"
                    }
                ], 
                "return_type": "int bdflush(int func, long *address); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/kdaemon.h"
            }
        ], 
        "man_page": "bdflush"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bind", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "const struct sockaddr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* See NOTES */", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "bind"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cacheflush", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "int", 
                        "var": "nbytes"
                    }, 
                    {
                        "type": "int", 
                        "var": "cache"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "asm/cachectl.h"
            }
        ], 
        "man_page": "cacheflush"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "chmod", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fchmod", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fchmodat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "chmod"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "chown", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "uid_t", 
                        "var": "owner"
                    }, 
                    {
                        "type": "gid_t", 
                        "var": "group"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fchown", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "uid_t", 
                        "var": "owner"
                    }, 
                    {
                        "type": "gid_t", 
                        "var": "group"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "lchown", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "uid_t", 
                        "var": "owner"
                    }, 
                    {
                        "type": "gid_t", 
                        "var": "group"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fchownat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "uid_t", 
                        "var": "owner"
                    }, 
                    {
                        "type": "gid_t", 
                        "var": "group"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "chown"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "clock_nanosleep", 
                "parameters": [
                    {
                        "type": "clockid_t", 
                        "var": "clock_id"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "request"
                    }, 
                    {
                        "type": "struct timespec *", 
                        "var": "remain"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "clock_nanosleep"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*fn)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": ")"
                    }, 
                    {
                        "type": "void *", 
                        "var": "child_stack"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "void *", 
                        "var": "arg"
                    }, 
                    {
                        "type": "... /* pid_t *", 
                        "var": "ptid"
                    }, 
                    {
                        "type": "struct user_desc *", 
                        "var": "tls"
                    }, 
                    {
                        "type": "pid_t *ctid *", 
                        "var": "/"
                    }
                ], 
                "return_type": "int clone(int"
            }, 
            {
                "name": "clone", 
                "parameters": [
                    {
                        "type": "unsigned long", 
                        "var": "flags"
                    }, 
                    {
                        "type": "void *", 
                        "var": "child_stack"
                    }, 
                    {
                        "type": "void *", 
                        "var": "ptid"
                    }, 
                    {
                        "type": "void *", 
                        "var": "ctid"
                    }, 
                    {
                        "type": "struct pt_regs *", 
                        "var": "regs"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "clone"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "close", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "close"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "connect", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "const struct sockaddr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* See NOTES */", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "connect"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "create_module", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "caddr_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/module.h"
            }
        ], 
        "man_page": "create_module"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "delete_module", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "delete_module"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "dup2", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "oldfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "newfd"
                    }
                ], 
                "return_type": "int dup(int oldfd); int"
            }, 
            {
                "name": "dup3", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "oldfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "newfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Obtain O_* constant definitions */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "dup"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "epoll_create1", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int epoll_create(int size); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/epoll.h"
            }
        ], 
        "man_page": "epoll_create"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "epoll_pwait", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "epfd"
                    }, 
                    {
                        "type": "struct epoll_event *", 
                        "var": "events"
                    }, 
                    {
                        "type": "int", 
                        "var": "maxevents"
                    }, 
                    {
                        "type": "int", 
                        "var": "timeout"
                    }, 
                    {
                        "type": "const sigset_t *", 
                        "var": "sigmask"
                    }
                ], 
                "return_type": "int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/epoll.h"
            }
        ], 
        "man_page": "epoll_wait"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "exit_group", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "status"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/unistd.h"
            }
        ], 
        "man_page": "exit_group"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "fallocate", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "fallocate"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fanotify_mark", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fanotify_fd"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "uint64_t", 
                        "var": "mask"
                    }, 
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/fanotify.h"
            }
        ], 
        "man_page": "fanotify_mark"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fcntl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "... /* arg *", 
                        "var": "/"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "fcntl"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/futex.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "futex"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "futimesat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "const struct timeval", 
                        "var": "times[2]"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "futimesat"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getcpu", 
                "parameters": [
                    {
                        "type": "unsigned *", 
                        "var": "cpu"
                    }, 
                    {
                        "type": "unsigned *", 
                        "var": "node"
                    }, 
                    {
                        "type": "struct getcpu_cache *", 
                        "var": "tcache"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/getcpu.h"
            }
        ], 
        "man_page": "getcpu"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getdents", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "struct linux_dirent *", 
                        "var": "dirp"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "count"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "getdents"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getitimer", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "which"
                    }, 
                    {
                        "type": "struct itimerval *", 
                        "var": "curr_value"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "setitimer", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "which"
                    }, 
                    {
                        "type": "const struct itimerval *", 
                        "var": "new_value"
                    }, 
                    {
                        "type": "struct itimerval *", 
                        "var": "old_value"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "getitimer"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getsockname", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct sockaddr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t *", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "getsockname"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setsockopt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "level"
                    }, 
                    {
                        "type": "int", 
                        "var": "optname"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "optval"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "optlen"
                    }
                ], 
                "return_type": "int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen); int"
            }
        ], 
        "includes": [
            {
                "comments": "/* See NOTES */", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "getsockopt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gettid", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "pid_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }
        ], 
        "man_page": "gettid"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gettimeofday", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "tv"
                    }, 
                    {
                        "type": "struct timezone *", 
                        "var": "tz"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "settimeofday", 
                "parameters": [
                    {
                        "type": "const struct timeval *", 
                        "var": "tv"
                    }, 
                    {
                        "type": "const struct timezone *", 
                        "var": "tz"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "gettimeofday"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getunwind", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buf_size"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "syscall.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/unwind.h"
            }
        ], 
        "man_page": "getunwind"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fgetxattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "void *", 
                        "var": "value"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "ssize_t getxattr(const char *path, const char *name, void *value, size_t size); ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size); ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/xattr.h"
            }
        ], 
        "man_page": "getxattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "get_kernel_syms", 
                "parameters": [
                    {
                        "type": "struct kernel_sym *", 
                        "var": "table"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/module.h"
            }
        ], 
        "man_page": "get_kernel_syms"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "get_mempolicy", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "mode"
                    }, 
                    {
                        "type": "unsigned long *", 
                        "var": "nodemask"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "maxnode"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "addr"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "get_mempolicy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "set_robust_list", 
                "parameters": [
                    {
                        "type": "struct robust_list_head *", 
                        "var": "head"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "long get_robust_list(int pid, struct robust_list_head **head_ptr, size_t *len_ptr); long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/futex.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "syscall.h"
            }
        ], 
        "man_page": "get_robust_list"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "init_module", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "module_image"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "param_values"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "finit_module", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "param_values"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "init_module"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inotify_init1", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int inotify_init(void); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/inotify.h"
            }
        ], 
        "man_page": "inotify_init"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ioprio_set", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "which"
                    }, 
                    {
                        "type": "int", 
                        "var": "who"
                    }, 
                    {
                        "type": "int", 
                        "var": "ioprio"
                    }
                ], 
                "return_type": "int ioprio_get(int which, int who); int"
            }
        ], 
        "includes": [], 
        "man_page": "ioprio_set"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "io_cancel", 
                "parameters": [
                    {
                        "type": "aio_context_t", 
                        "var": "ctx_id"
                    }, 
                    {
                        "type": "struct iocb *", 
                        "var": "iocb"
                    }, 
                    {
                        "type": "struct io_event *", 
                        "var": "result"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Defines needed types */", 
                "file_path": "linux/aio_abi.h"
            }
        ], 
        "man_page": "io_cancel"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "io_destroy", 
                "parameters": [
                    {
                        "type": "aio_context_t", 
                        "var": "ctx_id"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Defines needed types */", 
                "file_path": "linux/aio_abi.h"
            }
        ], 
        "man_page": "io_destroy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "io_getevents", 
                "parameters": [
                    {
                        "type": "aio_context_t", 
                        "var": "ctx_id"
                    }, 
                    {
                        "type": "long", 
                        "var": "min_nr"
                    }, 
                    {
                        "type": "long", 
                        "var": "nr"
                    }, 
                    {
                        "type": "struct io_event *", 
                        "var": "events"
                    }, 
                    {
                        "type": "struct timespec *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Defines needed types */", 
                "file_path": "linux/aio_abi.h"
            }, 
            {
                "comments": "/* Defines 'struct timespec' */", 
                "file_path": "linux/time.h"
            }
        ], 
        "man_page": "io_getevents"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "io_setup", 
                "parameters": [
                    {
                        "type": "unsigned", 
                        "var": "nr_events"
                    }, 
                    {
                        "type": "aio_context_t *", 
                        "var": "ctx_idp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Defines needed types */", 
                "file_path": "linux/aio_abi.h"
            }
        ], 
        "man_page": "io_setup"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "io_submit", 
                "parameters": [
                    {
                        "type": "aio_context_t", 
                        "var": "ctx_id"
                    }, 
                    {
                        "type": "long", 
                        "var": "nr"
                    }, 
                    {
                        "type": "struct iocb *", 
                        "var": "*iocbpp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Defines needed types */", 
                "file_path": "linux/aio_abi.h"
            }
        ], 
        "man_page": "io_submit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ipc", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "call"
                    }, 
                    {
                        "type": "int", 
                        "var": "first"
                    }, 
                    {
                        "type": "int", 
                        "var": "second"
                    }, 
                    {
                        "type": "int", 
                        "var": "third"
                    }, 
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "long", 
                        "var": "fifth"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "ipc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "kcmp", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid1"
                    }, 
                    {
                        "type": "pid_t", 
                        "var": "pid2"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "idx1"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "idx2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/kcmp.h"
            }
        ], 
        "man_page": "kcmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "keyctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "keyutils.h"
            }
        ], 
        "man_page": "keyctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "kill", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "kill"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "link", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "oldpath"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "newpath"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "linkat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "olddirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "oldpath"
                    }, 
                    {
                        "type": "int", 
                        "var": "newdirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "newpath"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "link"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "listen", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "backlog"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* See NOTES */", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "listen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "flistxattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "char *", 
                        "var": "list"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "ssize_t listxattr(const char *path, char *list, size_t size); ssize_t llistxattr(const char *path, char *list, size_t size); ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/xattr.h"
            }
        ], 
        "man_page": "listxattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "_llseek", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "offset_high"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "offset_low"
                    }, 
                    {
                        "type": "loff_t *", 
                        "var": "result"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "whence"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "llseek"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbind", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "const unsigned long *", 
                        "var": "nodemask"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "maxnode"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "flags"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "numaif.h"
            }
        ], 
        "man_page": "mbind"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "migrate_pages", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "pid"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "maxnode"
                    }, 
                    {
                        "type": "const unsigned long *", 
                        "var": "old_nodes"
                    }, 
                    {
                        "type": "const unsigned long *", 
                        "var": "new_nodes"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "numaif.h"
            }
        ], 
        "man_page": "migrate_pages"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mkdir", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mkdirat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "mkdir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mknod", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "dev_t", 
                        "var": "dev"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mknodat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "dev_t", 
                        "var": "dev"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "mknod"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "munlock", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int mlock(const void *addr, size_t len); int"
            }, 
            {
                "name": "munlockall", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int mlockall(int flags); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "mlock"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "munmap", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "length"
                    }
                ], 
                "return_type": "void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "mmap"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mmap2", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "length"
                    }, 
                    {
                        "type": "int", 
                        "var": "prot"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "pgoffset"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "mmap2"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "modify_ldt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "func"
                    }, 
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "bytecount"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }
        ], 
        "man_page": "modify_ldt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mount", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "source"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "target"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "filesystemtype"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "mountflags"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "data"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mount.h"
            }
        ], 
        "man_page": "mount"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "move_pages", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "pid"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "count"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*pages"
                    }, 
                    {
                        "type": "const int *", 
                        "var": "nodes"
                    }, 
                    {
                        "type": "int *", 
                        "var": "status"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "numaif.h"
            }
        ], 
        "man_page": "move_pages"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mprotect", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "prot"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "mprotect"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_getsetattr", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "struct mq_attr *", 
                        "var": "newattr"
                    }, 
                    {
                        "type": "struct mq_attr *", 
                        "var": "oldattr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_getsetattr"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "mremap", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "old_address"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "old_size"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "new_size"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "... /* void *new_address *", 
                        "var": "/"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "mremap"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "msgctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "msqid"
                    }, 
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "struct msqid_ds *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/msg.h"
            }
        ], 
        "man_page": "msgctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "msgget", 
                "parameters": [
                    {
                        "type": "key_t", 
                        "var": "key"
                    }, 
                    {
                        "type": "int", 
                        "var": "msgflg"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/msg.h"
            }
        ], 
        "man_page": "msgget"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "msgsnd", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "msqid"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "msgp"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msgsz"
                    }, 
                    {
                        "type": "int", 
                        "var": "msgflg"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "msgrcv", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "msqid"
                    }, 
                    {
                        "type": "void *", 
                        "var": "msgp"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msgsz"
                    }, 
                    {
                        "type": "long", 
                        "var": "msgtyp"
                    }, 
                    {
                        "type": "int", 
                        "var": "msgflg"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/msg.h"
            }
        ], 
        "man_page": "msgop"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "nfsservctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "struct nfsctl_arg *", 
                        "var": "argp"
                    }, 
                    {
                        "type": "union nfsctl_res *", 
                        "var": "resp"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/nfsd/syscall.h"
            }
        ], 
        "man_page": "nfsservctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "open", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int open(const char *pathname, int flags); int"
            }, 
            {
                "name": "creat", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "openat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int openat(int dirfd, const char *pathname, int flags); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "open"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "name_to_handle_at", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "struct file_handle *", 
                        "var": "handle"
                    }, 
                    {
                        "type": "int *", 
                        "var": "mount_id"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "open_by_handle_at", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "mount_fd"
                    }, 
                    {
                        "type": "struct file_handle *", 
                        "var": "handle"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "open_by_handle_at"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inl_p", 
                "parameters": [
                    {
                        "type": "unsigned short int", 
                        "var": "port"
                    }
                ], 
                "return_type": "unsigned char inb(unsigned short int port); unsigned char inb_p(unsigned short int port); unsigned short int inw(unsigned short int port); unsigned short int inw_p(unsigned short int port); unsigned int inl(unsigned short int port); unsigned int"
            }, 
            {
                "name": "outl_p", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "value"
                    }, 
                    {
                        "type": "unsigned short int", 
                        "var": "port"
                    }
                ], 
                "return_type": "void outb(unsigned char value, unsigned short int port); void outb_p(unsigned char value, unsigned short int port); void outw(unsigned short int value, unsigned short int port); void outw_p(unsigned short int value, unsigned short int port); void outl(unsigned int value, unsigned short int port); void"
            }, 
            {
                "name": "outsl", 
                "parameters": [
                    {
                        "type": "unsigned short int", 
                        "var": "port"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "unsigned long int", 
                        "var": "count"
                    }
                ], 
                "return_type": "void insb(unsigned short int port, void *addr, unsigned long int count); void insw(unsigned short int port, void *addr, unsigned long int count); void insl(unsigned short int port, void *addr, unsigned long int count); void outsb(unsigned short int port, const void *addr, unsigned long int count); void outsw(unsigned short int port, const void *addr, unsigned long int count); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/io.h"
            }
        ], 
        "man_page": "outb"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pciconfig_iobase", 
                "parameters": [
                    {
                        "type": "long", 
                        "var": "which"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "bus"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "devfn"
                    }
                ], 
                "return_type": "int pciconfig_read(unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void *buf); int pciconfig_write(unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void *buf); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pci.h"
            }
        ], 
        "man_page": "pciconfig_read"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "perfmonctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "void *", 
                        "var": "arg"
                    }, 
                    {
                        "type": "int", 
                        "var": "narg"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "syscall.h"
            }, 
            {
                "comments": "", 
                "file_path": "perfmon.h"
            }
        ], 
        "man_page": "perfmonctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "perf_event_open", 
                "parameters": [
                    {
                        "type": "struct perf_event_attr *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "int", 
                        "var": "cpu"
                    }, 
                    {
                        "type": "int", 
                        "var": "group_fd"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/perf_event.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/hw_breakpoint.h"
            }
        ], 
        "man_page": "perf_event_open"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pipe", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "pipefd[2]"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "pipe2", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "pipefd[2]"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Obtain O_* constant definitions */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "pipe"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "poll", 
                "parameters": [
                    {
                        "type": "struct pollfd *", 
                        "var": "fds"
                    }, 
                    {
                        "type": "nfds_t", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "int", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ppoll", 
                "parameters": [
                    {
                        "type": "struct pollfd *", 
                        "var": "fds"
                    }, 
                    {
                        "type": "nfds_t", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "timeout_ts"
                    }, 
                    {
                        "type": "const sigset_t *", 
                        "var": "sigmask"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "poll.h"
            }, 
            {
                "comments": "", 
                "file_path": "signal.h"
            }, 
            {
                "comments": "", 
                "file_path": "poll.h"
            }
        ], 
        "man_page": "poll"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "posix_fadvise", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "advice"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "posix_fadvise"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "prctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "option"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "arg2"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "arg3"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "arg4"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "arg5"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/prctl.h"
            }
        ], 
        "man_page": "prctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "process_vm_readv", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "local_iov"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "liovcnt"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "remote_iov"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "riovcnt"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "process_vm_writev", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "local_iov"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "liovcnt"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "remote_iov"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "riovcnt"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/uio.h"
            }
        ], 
        "man_page": "process_vm_readv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ptrace", 
                "parameters": [
                    {
                        "type": "enum __ptrace_request", 
                        "var": "request"
                    }, 
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "void *", 
                        "var": "data"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/ptrace.h"
            }
        ], 
        "man_page": "ptrace"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "query_module", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "which"
                    }, 
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "bufsize"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "ret"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/module.h"
            }
        ], 
        "man_page": "query_module"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "quotactl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "special"
                    }, 
                    {
                        "type": "int", 
                        "var": "id"
                    }, 
                    {
                        "type": "caddr_t", 
                        "var": "addr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/quota.h"
            }, 
            {
                "comments": "", 
                "file_path": "xfs/xqm.h"
            }
        ], 
        "man_page": "quotactl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "read", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "count"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "read"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "readahead", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "off64_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "count"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "readahead"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "readdir", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "struct old_linux_dirent *", 
                        "var": "dirp"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "count"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "readdir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "readlink", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "bufsiz"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "readlinkat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "bufsiz"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "readlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "readv", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "iov"
                    }, 
                    {
                        "type": "int", 
                        "var": "iovcnt"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "writev", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "iov"
                    }, 
                    {
                        "type": "int", 
                        "var": "iovcnt"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "preadv", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "iov"
                    }, 
                    {
                        "type": "int", 
                        "var": "iovcnt"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "pwritev", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "iov"
                    }, 
                    {
                        "type": "int", 
                        "var": "iovcnt"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/uio.h"
            }
        ], 
        "man_page": "readv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "recv", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "recvfrom", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "struct sockaddr *", 
                        "var": "src_addr"
                    }, 
                    {
                        "type": "socklen_t *", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "recvmsg", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct msghdr *", 
                        "var": "msg"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "recv"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE          /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "recvmmsg"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "remap_file_pages", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "int", 
                        "var": "prot"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "pgoff"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mman.h"
            }
        ], 
        "man_page": "remap_file_pages"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fremovexattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "int removexattr(const char *path, const char *name); int lremovexattr(const char *path, const char *name); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/xattr.h"
            }
        ], 
        "man_page": "removexattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rename", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "oldpath"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "newpath"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "renameat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "olddirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "oldpath"
                    }, 
                    {
                        "type": "int", 
                        "var": "newdirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "newpath"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "renameat2", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "olddirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "oldpath"
                    }, 
                    {
                        "type": "int", 
                        "var": "newdirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "newpath"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "rename"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "request_key", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "type"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "description"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "callout_info"
                    }, 
                    {
                        "type": "key_serial_t", 
                        "var": "keyring"
                    }
                ], 
                "return_type": "key_serial_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "keyutils.h"
            }
        ], 
        "man_page": "request_key"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rt_sigqueueinfo", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "tgid"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }, 
                    {
                        "type": "siginfo_t *", 
                        "var": "uinfo"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rt_tgsigqueueinfo", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "tgid"
                    }, 
                    {
                        "type": "pid_t", 
                        "var": "tid"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }, 
                    {
                        "type": "siginfo_t *", 
                        "var": "uinfo"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "rt_sigqueueinfo"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "s390_runtime_instr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "command"
                    }, 
                    {
                        "type": "int", 
                        "var": "signum"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "asm/runtime_instr.h"
            }
        ], 
        "man_page": "s390_runtime_instr"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "sched_setaffinity", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "cpusetsize"
                    }, 
                    {
                        "type": "const cpu_set_t *", 
                        "var": "mask"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sched_getaffinity", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "cpusetsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "mask"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "sched_setaffinity"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sched_setattr", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "const struct sched_attr *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sched_getattr", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "const struct sched_attr *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "size"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "sched_setattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sched_setparam", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "const struct sched_param *", 
                        "var": "param"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sched_getparam", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "struct sched_param *", 
                        "var": "param"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "sched_setparam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sched_getscheduler", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "sched_setscheduler"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "select", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "readfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "writefds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "exceptfds"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "FD_CLR", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "FD_ISSET", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "FD_SET", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "FD_ZERO", 
                "parameters": [
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "pselect", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "readfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "writefds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "exceptfds"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "timeout"
                    }, 
                    {
                        "type": "const sigset_t *", 
                        "var": "sigmask"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/select.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/select.h"
            }
        ], 
        "man_page": "select"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "select", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "readfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "writefds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "exceptfds"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "utimeout"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "FD_CLR", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "FD_ISSET", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "FD_SET", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "FD_ZERO", 
                "parameters": [
                    {
                        "type": "fd_set *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "pselect", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "nfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "readfds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "writefds"
                    }, 
                    {
                        "type": "fd_set *", 
                        "var": "exceptfds"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "ntimeout"
                    }, 
                    {
                        "type": "const sigset_t *", 
                        "var": "sigmask"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/select.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/select.h"
            }
        ], 
        "man_page": "select_tut"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "semctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "semid"
                    }, 
                    {
                        "type": "int", 
                        "var": "semnum"
                    }, 
                    {
                        "type": "int", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/sem.h"
            }
        ], 
        "man_page": "semctl"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/sem.h"
            }
        ], 
        "man_page": "semget"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "semop", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "semid"
                    }, 
                    {
                        "type": "struct sembuf *", 
                        "var": "sops"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nsops"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "semtimedop", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "semid"
                    }, 
                    {
                        "type": "struct sembuf *", 
                        "var": "sops"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nsops"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/sem.h"
            }
        ], 
        "man_page": "semop"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "send", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "sendto", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "const struct sockaddr *", 
                        "var": "dest_addr"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "addrlen"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "sendmsg", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "const struct msghdr *", 
                        "var": "msg"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "send"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE          /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "sendmmsg", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct mmsghdr *", 
                        "var": "msgvec"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "vlen"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "sendmmsg"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "setns", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "nstype"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "setns"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fsetxattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "value"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int setxattr(const char *path, const char *name, const void *value, size_t size, int flags); int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/xattr.h"
            }
        ], 
        "man_page": "setxattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "set_mempolicy", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "const unsigned long *", 
                        "var": "nodemask"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "maxnode"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "numaif.h"
            }
        ], 
        "man_page": "set_mempolicy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "set_tid_address", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "tidptr"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/unistd.h"
            }
        ], 
        "man_page": "set_tid_address"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "shmat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "shmid"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "shmaddr"
                    }, 
                    {
                        "type": "int", 
                        "var": "shmflg"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "shmdt", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "shmaddr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/shm.h"
            }
        ], 
        "man_page": "shmop"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sigaction", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "signum"
                    }, 
                    {
                        "type": "const struct sigaction *", 
                        "var": "act"
                    }, 
                    {
                        "type": "struct sigaction *", 
                        "var": "oldact"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "sigaction"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sigwaitinfo", 
                "parameters": [
                    {
                        "type": "const sigset_t *", 
                        "var": "set"
                    }, 
                    {
                        "type": "siginfo_t *", 
                        "var": "info"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sigtimedwait", 
                "parameters": [
                    {
                        "type": "const sigset_t *", 
                        "var": "set"
                    }, 
                    {
                        "type": "siginfo_t *", 
                        "var": "info"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "sigwaitinfo"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "splice", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd_in"
                    }, 
                    {
                        "type": "loff_t *", 
                        "var": "off_in"
                    }, 
                    {
                        "type": "int", 
                        "var": "fd_out"
                    }, 
                    {
                        "type": "loff_t *", 
                        "var": "off_out"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "splice"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "spu_create", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "int", 
                        "var": "neighbor_fd"
                    }
                ], 
                "return_type": "int spu_create(const char *pathname, int flags, mode_t mode); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/spu.h"
            }
        ], 
        "man_page": "spu_create"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "spu_run", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "unsigned int *", 
                        "var": "npc"
                    }, 
                    {
                        "type": "unsigned int *", 
                        "var": "event"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/spu.h"
            }
        ], 
        "man_page": "spu_run"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "stat", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "struct stat *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fstat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "struct stat *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "lstat", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "struct stat *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fstatat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "struct stat *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "stat"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "subpage_prot", 
                "parameters": [
                    {
                        "type": "unsigned long", 
                        "var": "addr"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "len"
                    }, 
                    {
                        "type": "uint32_t *", 
                        "var": "map"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [], 
        "man_page": "subpage_prot"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "symlink", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "target"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "linkpath"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "symlinkat", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "target"
                    }, 
                    {
                        "type": "int", 
                        "var": "newdirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "linkpath"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "symlink"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "sync_file_range", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "off64_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "off64_t", 
                        "var": "nbytes"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "sync_file_range"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "syscall", 
                "parameters": [
                    {
                        "type": "long", 
                        "var": "number"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* For SYS_xxx definitions */", 
                "file_path": "sys/syscall.h"
            }
        ], 
        "man_page": "syscall"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "_sysctl", 
                "parameters": [
                    {
                        "type": "struct __sysctl_args *", 
                        "var": "args"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/sysctl.h"
            }
        ], 
        "man_page": "sysctl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "syslog", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "char *", 
                        "var": "bufp"
                    }, 
                    {
                        "type": "int", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "klogctl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "char *", 
                        "var": "bufp"
                    }, 
                    {
                        "type": "int", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/klog.h"
            }
        ], 
        "man_page": "syslog"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "tee", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd_in"
                    }, 
                    {
                        "type": "int", 
                        "var": "fd_out"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "tee"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timerfd_create", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "clockid"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "timerfd_settime", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "const struct itimerspec *", 
                        "var": "new_value"
                    }, 
                    {
                        "type": "struct itimerspec *", 
                        "var": "old_value"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "timerfd_gettime", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "struct itimerspec *", 
                        "var": "curr_value"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/timerfd.h"
            }
        ], 
        "man_page": "timerfd_create"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timer_create", 
                "parameters": [
                    {
                        "type": "clockid_t", 
                        "var": "clockid"
                    }, 
                    {
                        "type": "struct sigevent *", 
                        "var": "sevp"
                    }, 
                    {
                        "type": "timer_t *", 
                        "var": "timerid"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }, 
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "timer_create"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timer_delete", 
                "parameters": [
                    {
                        "type": "timer_t", 
                        "var": "timerid"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "timer_delete"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timer_getoverrun", 
                "parameters": [
                    {
                        "type": "timer_t", 
                        "var": "timerid"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "timer_getoverrun"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timer_gettime", 
                "parameters": [
                    {
                        "type": "timer_t", 
                        "var": "timerid"
                    }, 
                    {
                        "type": "struct itimerspec *", 
                        "var": "curr_value"
                    }
                ], 
                "return_type": "int timer_settime(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec * old_value); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "timer_settime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tkill", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "tid"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tgkill", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "tgid"
                    }, 
                    {
                        "type": "int", 
                        "var": "tid"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "tkill"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "umount", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "target"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "umount2", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "target"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mount.h"
            }
        ], 
        "man_page": "umount"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "unlink", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "unlinkat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "unlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "unshare", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "unshare"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ustat", 
                "parameters": [
                    {
                        "type": "dev_t", 
                        "var": "dev"
                    }, 
                    {
                        "type": "struct ustat *", 
                        "var": "ubuf"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "/* libc[45] */", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "/* glibc2 */", 
                "file_path": "ustat.h"
            }
        ], 
        "man_page": "ustat"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "utime", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }, 
                    {
                        "type": "const struct utimbuf *", 
                        "var": "times"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "utimes", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }, 
                    {
                        "type": "const struct timeval", 
                        "var": "times[2]"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "utime.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "utime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "utimensat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "const struct timespec", 
                        "var": "times[2]"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "futimens", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct timespec", 
                        "var": "times[2]"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "utimensat"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "vmsplice", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct iovec *", 
                        "var": "iov"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "nr_segs"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/uio.h"
            }
        ], 
        "man_page": "vmsplice"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wait3", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "status"
                    }, 
                    {
                        "type": "int", 
                        "var": "options"
                    }, 
                    {
                        "type": "struct rusage *", 
                        "var": "rusage"
                    }
                ], 
                "return_type": "pid_t"
            }, 
            {
                "name": "wait4", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "int *", 
                        "var": "status"
                    }, 
                    {
                        "type": "int", 
                        "var": "options"
                    }, 
                    {
                        "type": "struct rusage *", 
                        "var": "rusage"
                    }
                ], 
                "return_type": "pid_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/resource.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/wait.h"
            }
        ], 
        "man_page": "wait4"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "abort", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "abort"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "abs", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "j"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "labs", 
                "parameters": [
                    {
                        "type": "long int", 
                        "var": "j"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "llabs", 
                "parameters": [
                    {
                        "type": "long long int", 
                        "var": "j"
                    }
                ], 
                "return_type": "long long int"
            }, 
            {
                "name": "imaxabs", 
                "parameters": [
                    {
                        "type": "intmax_t", 
                        "var": "j"
                    }
                ], 
                "return_type": "intmax_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }, 
            {
                "comments": "", 
                "file_path": "inttypes.h"
            }
        ], 
        "man_page": "abs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "acosl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double acos(double x); float acosf(float x); long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "acos"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "acosh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "acoshf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "acoshl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "acosh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "addseverity", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "severity"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fmtmsg.h"
            }
        ], 
        "man_page": "addseverity"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "adjtime", 
                "parameters": [
                    {
                        "type": "const struct timeval *", 
                        "var": "delta"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "olddelta"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "adjtime"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "aio_init", 
                "parameters": [
                    {
                        "type": "const struct aioinit *", 
                        "var": "init"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "aio.h"
            }
        ], 
        "man_page": "aio_init"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "aio.h"
            }
        ], 
        "man_page": "aio_suspend"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "argz_add", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "str"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_add_sep", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "int", 
                        "var": "delim"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_append", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buf_len"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_count", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "argz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "argz_len"
                    }
                ], 
                "return_type": "size_t"
            }, 
            {
                "name": "argz_create", 
                "parameters": [
                    {
                        "type": "char * const", 
                        "var": "argv[]"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_create_sep", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "int", 
                        "var": "sep"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_delete", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "char *", 
                        "var": "entry"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "argz_extract", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "argz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*argv"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "argz_insert", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "char *", 
                        "var": "before"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "entry"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_next", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "argz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "entry"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "argz_replace", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*argz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "argz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "with"
                    }, 
                    {
                        "type": "unsigned int *", 
                        "var": "replace_count"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "argz_stringify", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "argz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "sep"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "argz.h"
            }
        ], 
        "man_page": "argz_add"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "asin", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "asinf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "asinl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "asin"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "asinh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "asinhf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "asinhl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "asinh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "assert", 
                "parameters": [
                    {
                        "type": "scalar", 
                        "var": "expression"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "assert.h"
            }
        ], 
        "man_page": "assert"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "assert_perror", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errnum"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "assert.h"
            }
        ], 
        "man_page": "assert_perror"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "atan", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "atanf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "atanl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "atan"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "atan2l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "y"
                    }, 
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double atan2(double y, double x); float atan2f(float y, float x); long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "atan2"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "atanh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "atanhf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "atanhl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "atanh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*function)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void)"
                    }
                ], 
                "return_type": "int atexit(void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "atexit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "atof", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }
                ], 
                "return_type": "double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "atof"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "atoi", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "atol", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }
                ], 
                "return_type": "long"
            }, 
            {
                "name": "atoll", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }
                ], 
                "return_type": "long long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "atoi"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "dirname", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "path"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "basename", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "path"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "libgen.h"
            }
        ], 
        "man_page": "basename"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bcmp", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }
        ], 
        "man_page": "bcmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bcopy", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }
        ], 
        "man_page": "bcopy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bindresvport", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sockfd"
                    }, 
                    {
                        "type": "struct sockaddr_in *", 
                        "var": "sin"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "netinet/in.h"
            }
        ], 
        "man_page": "bindresvport"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "bsearch"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bcmp", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "bcopy", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "bzero", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "memccpy", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memchr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memcmp", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "memcpy", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memfrob", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memmem", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "needle"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "needlelen"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "haystack"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "haystacklen"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memmove", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memset", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "bstring"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "btowc", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "btowc"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "db.h"
            }
        ], 
        "man_page": "btree"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "htonl", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "hostlong"
                    }
                ], 
                "return_type": "uint32_t"
            }, 
            {
                "name": "htons", 
                "parameters": [
                    {
                        "type": "uint16_t", 
                        "var": "hostshort"
                    }
                ], 
                "return_type": "uint16_t"
            }, 
            {
                "name": "ntohl", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "netlong"
                    }
                ], 
                "return_type": "uint32_t"
            }, 
            {
                "name": "ntohs", 
                "parameters": [
                    {
                        "type": "uint16_t", 
                        "var": "netshort"
                    }
                ], 
                "return_type": "uint16_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "arpa/inet.h"
            }
        ], 
        "man_page": "byteorder"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "bzero", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }
        ], 
        "man_page": "bzero"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "catgets", 
                "parameters": [
                    {
                        "type": "nl_catd", 
                        "var": "catalog"
                    }, 
                    {
                        "type": "int", 
                        "var": "set_number"
                    }, 
                    {
                        "type": "int", 
                        "var": "message_number"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "message"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "nl_types.h"
            }
        ], 
        "man_page": "catgets"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cbrt", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "cbrtf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "cbrtl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "cbrt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ceil", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "ceilf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "ceill", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "ceil"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cfree", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }
                ], 
                "return_type": "/* In SunOS 4 */ int"
            }, 
            {
                "name": "cfree", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }
                ], 
                "return_type": "/* In glibc or FreeBSD libcompat */ void"
            }, 
            {
                "name": "cfree", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "num"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "size"
                    }
                ], 
                "return_type": "/* In SCO OpenServer */ void"
            }, 
            {
                "name": "cfree", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nelem"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "elsize"
                    }
                ], 
                "return_type": "/* In Solaris watchmalloc.so.1 */ void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "cfree"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "clearenv", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "clearenv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "clock", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "clock_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "clock"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "clock_getcpuclockid", 
                "parameters": [
                    {
                        "type": "pid_t", 
                        "var": "pid"
                    }, 
                    {
                        "type": "clockid_t *", 
                        "var": "clock_id"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [], 
        "man_page": "clock_getcpuclockid"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "closedir", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "closedir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "confstr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "name"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "confstr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "copysign", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "copysignf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "copysignl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "copysign"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cos", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "cosf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "cosl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "cos"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cosh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "coshf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "coshl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "cosh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "cpow", 
                "parameters": [
                    {
                        "type": "double complex", 
                        "var": "x"
                    }, 
                    {
                        "type": "complex double", 
                        "var": "z"
                    }
                ], 
                "return_type": "double complex"
            }, 
            {
                "name": "cpowf", 
                "parameters": [
                    {
                        "type": "float complex", 
                        "var": "x"
                    }, 
                    {
                        "type": "complex float", 
                        "var": "z"
                    }
                ], 
                "return_type": "float complex"
            }, 
            {
                "name": "cpowl", 
                "parameters": [
                    {
                        "type": "long double complex", 
                        "var": "x"
                    }, 
                    {
                        "type": "complex long double", 
                        "var": "z"
                    }
                ], 
                "return_type": "long double complex"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "complex.h"
            }
        ], 
        "man_page": "cpow"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "CPU_ZERO", 
                "parameters": [
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "CPU_ISSET", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "cpu"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void CPU_SET(int cpu, cpu_set_t *set); void CPU_CLR(int cpu, cpu_set_t *set); int"
            }, 
            {
                "name": "CPU_COUNT", 
                "parameters": [
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "CPU_XOR", 
                "parameters": [
                    {
                        "type": "cpu_set_t *", 
                        "var": "destset"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "srcset1"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "srcset2"
                    }
                ], 
                "return_type": "void CPU_AND(cpu_set_t *destset, cpu_set_t *srcset1, cpu_set_t *srcset2); void CPU_OR(cpu_set_t *destset, cpu_set_t *srcset1, cpu_set_t *srcset2); void"
            }, 
            {
                "name": "CPU_EQUAL", 
                "parameters": [
                    {
                        "type": "cpu_set_t *", 
                        "var": "set1"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set2"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "CPU_ALLOC_SIZE", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "num_cpus"
                    }
                ], 
                "return_type": "cpu_set_t *CPU_ALLOC(int num_cpus); void CPU_FREE(cpu_set_t *set); size_t"
            }, 
            {
                "name": "CPU_ZERO_S", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "setsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "CPU_ISSET_S", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "cpu"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "setsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "void CPU_SET_S(int cpu, size_t setsize, cpu_set_t *set); void CPU_CLR_S(int cpu, size_t setsize, cpu_set_t *set); int"
            }, 
            {
                "name": "CPU_COUNT_S", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "setsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "CPU_XOR_S", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "setsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "destset"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "srcset1"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "srcset2"
                    }
                ], 
                "return_type": "void CPU_AND_S(size_t setsize, cpu_set_t *destset, cpu_set_t *srcset1, cpu_set_t *srcset2); void CPU_OR_S(size_t setsize, cpu_set_t *destset, cpu_set_t *srcset1, cpu_set_t *srcset2); void"
            }, 
            {
                "name": "CPU_EQUAL_S", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "setsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set1"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "set2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "CPU_SET"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }, 
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "crypt", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "key"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "salt"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "crypt_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "key"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "salt"
                    }, 
                    {
                        "type": "struct crypt_data *", 
                        "var": "data"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "crypt.h"
            }
        ], 
        "man_page": "crypt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ctermid", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "ctermid"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "asctime", 
                "parameters": [
                    {
                        "type": "const struct tm *", 
                        "var": "tm"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "asctime_r", 
                "parameters": [
                    {
                        "type": "const struct tm *", 
                        "var": "tm"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ctime", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ctime_r", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "gmtime", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }
                ], 
                "return_type": "struct tm *"
            }, 
            {
                "name": "gmtime_r", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }, 
                    {
                        "type": "struct tm *", 
                        "var": "result"
                    }
                ], 
                "return_type": "struct tm *"
            }, 
            {
                "name": "localtime", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }
                ], 
                "return_type": "struct tm *"
            }, 
            {
                "name": "localtime_r", 
                "parameters": [
                    {
                        "type": "const time_t *", 
                        "var": "timep"
                    }, 
                    {
                        "type": "struct tm *", 
                        "var": "result"
                    }
                ], 
                "return_type": "struct tm *"
            }, 
            {
                "name": "mktime", 
                "parameters": [
                    {
                        "type": "struct tm *", 
                        "var": "tm"
                    }
                ], 
                "return_type": "time_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "ctime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "dbopen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "file"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "DBTYPE", 
                        "var": "type"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "openinfo"
                    }
                ], 
                "return_type": "DB *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "limits.h"
            }, 
            {
                "comments": "", 
                "file_path": "db.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "dbopen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ecb_crypt", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "key"
                    }, 
                    {
                        "type": "char *", 
                        "var": "data"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "datalen"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "cbc_crypt", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "key"
                    }, 
                    {
                        "type": "char *", 
                        "var": "data"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "datalen"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "mode"
                    }, 
                    {
                        "type": "char *", 
                        "var": "ivec"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "des_setparity", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "key"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "DES_FAILED", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "status"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "rpc/des_crypt.h"
            }
        ], 
        "man_page": "des_crypt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "difftime", 
                "parameters": [
                    {
                        "type": "time_t", 
                        "var": "time1"
                    }, 
                    {
                        "type": "time_t", 
                        "var": "time0"
                    }
                ], 
                "return_type": "double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "difftime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "div", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "numerator"
                    }, 
                    {
                        "type": "int", 
                        "var": "denominator"
                    }
                ], 
                "return_type": "div_t"
            }, 
            {
                "name": "ldiv", 
                "parameters": [
                    {
                        "type": "long", 
                        "var": "numerator"
                    }, 
                    {
                        "type": "long", 
                        "var": "denominator"
                    }
                ], 
                "return_type": "ldiv_t"
            }, 
            {
                "name": "lldiv", 
                "parameters": [
                    {
                        "type": "long long", 
                        "var": "numerator"
                    }, 
                    {
                        "type": "long long", 
                        "var": "denominator"
                    }
                ], 
                "return_type": "lldiv_t"
            }, 
            {
                "name": "imaxdiv", 
                "parameters": [
                    {
                        "type": "intmax_t", 
                        "var": "numerator"
                    }, 
                    {
                        "type": "intmax_t", 
                        "var": "denominator"
                    }
                ], 
                "return_type": "imaxdiv_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }, 
            {
                "comments": "", 
                "file_path": "inttypes.h"
            }
        ], 
        "man_page": "div"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "(*callback)", 
                "parameters": [
                    {
                        "type": "struct dl_phdr_info *", 
                        "var": "info"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "void *", 
                        "var": "data)"
                    }, 
                    {
                        "type": "void *", 
                        "var": "data"
                    }
                ], 
                "return_type": "int dl_iterate_phdr( int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "link.h"
            }
        ], 
        "man_page": "dl_iterate_phdr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "drand48", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "erand48", 
                "parameters": [
                    {
                        "type": "unsigned short", 
                        "var": "xsubi[3]"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "lrand48", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "nrand48", 
                "parameters": [
                    {
                        "type": "unsigned short", 
                        "var": "xsubi[3]"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "mrand48", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "jrand48", 
                "parameters": [
                    {
                        "type": "unsigned short", 
                        "var": "xsubi[3]"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "srand48", 
                "parameters": [
                    {
                        "type": "long int", 
                        "var": "seedval"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "seed48", 
                "parameters": [
                    {
                        "type": "unsigned short", 
                        "var": "seed16v[3]"
                    }
                ], 
                "return_type": "unsigned short *"
            }, 
            {
                "name": "lcong48", 
                "parameters": [
                    {
                        "type": "unsigned short", 
                        "var": "param[7]"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "drand48"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "drand48_r", 
                "parameters": [
                    {
                        "type": "struct drand48_data *", 
                        "var": "buffer"
                    }, 
                    {
                        "type": "double *", 
                        "var": "result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "lrand48_r", 
                "parameters": [
                    {
                        "type": "struct drand48_data *", 
                        "var": "buffer"
                    }, 
                    {
                        "type": "long int *", 
                        "var": "result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mrand48_r", 
                "parameters": [
                    {
                        "type": "struct drand48_data *", 
                        "var": "buffer"
                    }, 
                    {
                        "type": "long int *", 
                        "var": "result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "srand48_r", 
                "parameters": [
                    {
                        "type": "long int", 
                        "var": "seedval"
                    }, 
                    {
                        "type": "struct drand48_data *", 
                        "var": "buffer"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "drand48_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "duplocale", 
                "parameters": [
                    {
                        "type": "locale_t", 
                        "var": "locobj"
                    }
                ], 
                "return_type": "locale_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "duplocale"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ecvt_r", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "number"
                    }, 
                    {
                        "type": "int", 
                        "var": "ndigits"
                    }, 
                    {
                        "type": "int *", 
                        "var": "decpt"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sign"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fcvt_r", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "number"
                    }, 
                    {
                        "type": "int", 
                        "var": "ndigits"
                    }, 
                    {
                        "type": "int *", 
                        "var": "decpt"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sign"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "qecvt_r", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "number"
                    }, 
                    {
                        "type": "int", 
                        "var": "ndigits"
                    }, 
                    {
                        "type": "int *", 
                        "var": "decpt"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sign"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "qfcvt_r", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "number"
                    }, 
                    {
                        "type": "int", 
                        "var": "ndigits"
                    }, 
                    {
                        "type": "int *", 
                        "var": "decpt"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sign"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "ecvt_r"
    }, 
    {
        "defines": [
            {
                "text": "_BSD_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "le16toh", 
                "parameters": [
                    {
                        "type": "uint16_t", 
                        "var": "little_endian_16bits"
                    }
                ], 
                "return_type": "uint16_t htobe16(uint16_t host_16bits); uint16_t htole16(uint16_t host_16bits); uint16_t be16toh(uint16_t big_endian_16bits); uint16_t"
            }, 
            {
                "name": "le32toh", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "little_endian_32bits"
                    }
                ], 
                "return_type": "uint32_t htobe32(uint32_t host_32bits); uint32_t htole32(uint32_t host_32bits); uint32_t be32toh(uint32_t big_endian_32bits); uint32_t"
            }, 
            {
                "name": "le64toh", 
                "parameters": [
                    {
                        "type": "uint64_t", 
                        "var": "little_endian_64bits"
                    }
                ], 
                "return_type": "uint64_t htobe64(uint64_t host_64bits); uint64_t htole64(uint64_t host_64bits); uint64_t be64toh(uint64_t big_endian_64bits); uint64_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "endian.h"
            }
        ], 
        "man_page": "endian"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "envz_add", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*envz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "envz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "value"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "envz_entry", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "envz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "envz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "envz_get", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "envz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "envz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "envz_merge", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*envz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "envz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "envz2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "envz2_len"
                    }, 
                    {
                        "type": "int", 
                        "var": "override"
                    }
                ], 
                "return_type": "error_t"
            }, 
            {
                "name": "envz_remove", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*envz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "envz_len"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "envz_strip", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*envz"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "envz_len"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "envz.h"
            }
        ], 
        "man_page": "envz_add"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "erfl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double erf(double x); float erff(float x); long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "erf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "erfcl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double erfc(double x); float erfcf(float x); long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "erfc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "err", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "eval"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "errx", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "eval"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "warn", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "warnx", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "verr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "eval"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "args"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "verrx", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "eval"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "args"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "vwarn", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "args"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "vwarnx", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fmt"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "args"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "err.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdarg.h"
            }
        ], 
        "man_page": "err"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "error", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "status"
                    }, 
                    {
                        "type": "int", 
                        "var": "errnum"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "format"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "error_at_line", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "status"
                    }, 
                    {
                        "type": "int", 
                        "var": "errnum"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "linenum"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "format"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "(*error_print_progname)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "extern void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "error.h"
            }
        ], 
        "man_page": "error"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ether_ntoa", 
                "parameters": [
                    {
                        "type": "const struct ether_addr *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ether_aton", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "asc"
                    }
                ], 
                "return_type": "struct ether_addr *"
            }, 
            {
                "name": "ether_ntohost", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "hostname"
                    }, 
                    {
                        "type": "const struct ether_addr *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ether_hostton", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "hostname"
                    }, 
                    {
                        "type": "struct ether_addr *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ether_line", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "line"
                    }, 
                    {
                        "type": "struct ether_addr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "hostname"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ether_ntoa_r", 
                "parameters": [
                    {
                        "type": "const struct ether_addr *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ether_aton_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "asc"
                    }, 
                    {
                        "type": "struct ether_addr *", 
                        "var": "addr"
                    }
                ], 
                "return_type": "struct ether_addr *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netinet/ether.h"
            }
        ], 
        "man_page": "ether_aton"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "eaccess", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int euidaccess(const char *pathname, int mode); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "euidaccess"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "exit", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "status"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "exit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "exp", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "expf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "expl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "exp"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "exp10", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "exp10f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "exp10l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "exp10"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "exp2", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "exp2f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "exp2l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "exp2"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "expm1", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "expm1f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "expm1l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "expm1"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fabs", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "fabsf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "fabsl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "fabs"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "fcloseall", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fcloseall"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "feclearexcept", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "excepts"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fegetexceptflag", 
                "parameters": [
                    {
                        "type": "fexcept_t *", 
                        "var": "flagp"
                    }, 
                    {
                        "type": "int", 
                        "var": "excepts"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "feraiseexcept", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "excepts"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fesetexceptflag", 
                "parameters": [
                    {
                        "type": "const fexcept_t *", 
                        "var": "flagp"
                    }, 
                    {
                        "type": "int", 
                        "var": "excepts"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fetestexcept", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "excepts"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fegetround", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fesetround", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "rounding_mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fegetenv", 
                "parameters": [
                    {
                        "type": "fenv_t *", 
                        "var": "envp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "feholdexcept", 
                "parameters": [
                    {
                        "type": "fenv_t *", 
                        "var": "envp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fesetenv", 
                "parameters": [
                    {
                        "type": "const fenv_t *", 
                        "var": "envp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "feupdateenv", 
                "parameters": [
                    {
                        "type": "const fenv_t *", 
                        "var": "envp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fenv.h"
            }
        ], 
        "man_page": "fenv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fexecve", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "char *const", 
                        "var": "argv[]"
                    }, 
                    {
                        "type": "char *const", 
                        "var": "envp[]"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "fexecve"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ffs", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "i"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ffsl", 
                "parameters": [
                    {
                        "type": "long int", 
                        "var": "i"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ffsll", 
                "parameters": [
                    {
                        "type": "long long int", 
                        "var": "i"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }, 
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "ffs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fgetc", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fgets", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "size"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "getc", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getchar", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ungetc", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fgetc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fgetgrent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "struct group *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "grp.h"
            }
        ], 
        "man_page": "fgetgrent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fgetpwent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "struct passwd *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "fgetpwent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getwc", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "wint_t fgetwc(FILE *stream); wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fgetwc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fgetws", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "ws"
                    }, 
                    {
                        "type": "int", 
                        "var": "n"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fgetws"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "finite", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "finitef", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "finitel", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isinf", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isinff", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isinfl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isnan", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isnanf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isnanl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "finite"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "flockfile", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "filehandle"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "ftrylockfile", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "filehandle"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "funlockfile", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "filehandle"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "flockfile"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "floor", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "floorf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "floorl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "floor"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fma", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }, 
                    {
                        "type": "double", 
                        "var": "z"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "fmaf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }, 
                    {
                        "type": "float", 
                        "var": "z"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "fmal", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }, 
                    {
                        "type": "long double", 
                        "var": "z"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "fma"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fmemopen", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "mode"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "open_memstream", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*ptr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "sizeloc"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "open_wmemstream", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "*ptr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "sizeloc"
                    }
                ], 
                "return_type": "FILE *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fmemopen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fmod", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "fmodf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "fmodl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "fmod"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fmtmsg.h"
            }
        ], 
        "man_page": "fmtmsg"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fnmatch", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pattern"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "string"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fnmatch.h"
            }
        ], 
        "man_page": "fnmatch"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fopen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "path"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "mode"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "fdopen", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "mode"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "freopen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "path"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "mode"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "FILE *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fopen"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "fopencookie", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "cookie"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "mode"
                    }, 
                    {
                        "type": "cookie_io_functions_t", 
                        "var": "io_funcs"
                    }
                ], 
                "return_type": "FILE *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fopencookie"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fpathconf", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "name"
                    }
                ], 
                "return_type": "long"
            }, 
            {
                "name": "pathconf", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "path"
                    }, 
                    {
                        "type": "int", 
                        "var": "name"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "fpathconf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fpclassify", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isfinite", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isnormal", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isnan", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isinf", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "fpclassify"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fpurge", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "__fpurge", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdio_ext.h"
            }
        ], 
        "man_page": "fpurge"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "putwc", 
                "parameters": [
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "wint_t fputwc(wchar_t wc, FILE *stream); wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fputwc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fputws", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "ws"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fputws"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fread", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nmemb"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "size_t"
            }, 
            {
                "name": "fwrite", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nmemb"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fread"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "frexp", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "exp"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "frexpf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "exp"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "frexpl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "exp"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "frexp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fseeko", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "int", 
                        "var": "whence"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ftello", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "off_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "fseeko"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/ipc.h"
            }
        ], 
        "man_page": "ftok"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const FTSENT *", 
                        "var": "*"
                    }, 
                    {
                        "type": "const FTSENT *", 
                        "var": "*)"
                    }
                ], 
                "return_type": "FTS *fts_open(char * const *path_argv, int options, int"
            }, 
            {
                "name": "fts_read", 
                "parameters": [
                    {
                        "type": "FTS *", 
                        "var": "ftsp"
                    }
                ], 
                "return_type": "FTSENT *"
            }, 
            {
                "name": "fts_children", 
                "parameters": [
                    {
                        "type": "FTS *", 
                        "var": "ftsp"
                    }, 
                    {
                        "type": "int", 
                        "var": "options"
                    }
                ], 
                "return_type": "FTSENT *"
            }, 
            {
                "name": "fts_set", 
                "parameters": [
                    {
                        "type": "FTS *", 
                        "var": "ftsp"
                    }, 
                    {
                        "type": "FTSENT *", 
                        "var": "f"
                    }, 
                    {
                        "type": "int", 
                        "var": "options"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fts_close", 
                "parameters": [
                    {
                        "type": "FTS *", 
                        "var": "ftsp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "fts.h"
            }
        ], 
        "man_page": "fts"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE 500   /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "(*fn)", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fpath"
                    }, 
                    {
                        "type": "const struct stat *", 
                        "var": "sb"
                    }, 
                    {
                        "type": "int", 
                        "var": "typeflag)"
                    }, 
                    {
                        "type": "int", 
                        "var": "nopenfd"
                    }
                ], 
                "return_type": "int ftw(const char *dirpath, int"
            }, 
            {
                "name": "(*fn)", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "fpath"
                    }, 
                    {
                        "type": "const struct stat *", 
                        "var": "sb"
                    }, 
                    {
                        "type": "int", 
                        "var": "typeflag"
                    }, 
                    {
                        "type": "struct FTW *", 
                        "var": "ftwbuf)"
                    }, 
                    {
                        "type": "int", 
                        "var": "nopenfd"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int nftw(const char *dirpath, int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "ftw.h"
            }, 
            {
                "comments": "", 
                "file_path": "ftw.h"
            }
        ], 
        "man_page": "ftw"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "futimes", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "const struct timeval", 
                        "var": "tv[2]"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "lutimes", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }, 
                    {
                        "type": "const struct timeval", 
                        "var": "tv[2]"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "futimes"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fwide", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "fwide"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gcvt", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "number"
                    }, 
                    {
                        "type": "int", 
                        "var": "ndigit"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "gcvt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getaddrinfo", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "node"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "service"
                    }, 
                    {
                        "type": "const struct addrinfo *", 
                        "var": "hints"
                    }, 
                    {
                        "type": "struct addrinfo *", 
                        "var": "*res"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "freeaddrinfo", 
                "parameters": [
                    {
                        "type": "struct addrinfo *", 
                        "var": "res"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "gai_strerror", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errcode"
                    }
                ], 
                "return_type": "const char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getaddrinfo"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "getaddrinfo_a", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "struct gaicb *", 
                        "var": "list[]"
                    }, 
                    {
                        "type": "int", 
                        "var": "nitems"
                    }, 
                    {
                        "type": "struct sigevent *", 
                        "var": "sevp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gai_suspend", 
                "parameters": [
                    {
                        "type": "const struct gaicb * const", 
                        "var": "list[]"
                    }, 
                    {
                        "type": "int", 
                        "var": "nitems"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gai_error", 
                "parameters": [
                    {
                        "type": "struct gaicb *", 
                        "var": "req"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gai_cancel", 
                "parameters": [
                    {
                        "type": "struct gaicb *", 
                        "var": "req"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getaddrinfo_a"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getauxval", 
                "parameters": [
                    {
                        "type": "unsigned long", 
                        "var": "type"
                    }
                ], 
                "return_type": "unsigned long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/auxv.h"
            }
        ], 
        "man_page": "getauxval"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getcwd", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "getwd", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "get_current_dir_name", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "getcwd"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getenv", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "secure_getenv", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "getenv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getgrent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct group *"
            }, 
            {
                "name": "setgrent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endgrent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "grp.h"
            }
        ], 
        "man_page": "getgrent"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "grp.h"
            }
        ], 
        "man_page": "getgrent_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getgrnam", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct group *"
            }, 
            {
                "name": "getgrgid", 
                "parameters": [
                    {
                        "type": "gid_t", 
                        "var": "gid"
                    }
                ], 
                "return_type": "struct group *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "grp.h"
            }
        ], 
        "man_page": "getgrnam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gethostbyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct hostent *"
            }, 
            {
                "name": "gethostbyaddr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }
                ], 
                "return_type": "#include <sys/socket.h> /* for AF_INET */ struct hostent *"
            }, 
            {
                "name": "sethostent", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "stayopen"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endhostent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "herror", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "hstrerror", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "err"
                    }
                ], 
                "return_type": "const char *"
            }, 
            {
                "name": "gethostent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct hostent *"
            }, 
            {
                "name": "gethostbyname2", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "af"
                    }
                ], 
                "return_type": "struct hostent *"
            }, 
            {
                "name": "gethostent_r", 
                "parameters": [
                    {
                        "type": "struct hostent *", 
                        "var": "ret"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gethostbyaddr_r", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "ret"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gethostbyname_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "ret"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "gethostbyname2_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "ret"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct hostent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "gethostbyname"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getifaddrs", 
                "parameters": [
                    {
                        "type": "struct ifaddrs *", 
                        "var": "*ifap"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "freeifaddrs", 
                "parameters": [
                    {
                        "type": "struct ifaddrs *", 
                        "var": "ifa"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "ifaddrs.h"
            }
        ], 
        "man_page": "getifaddrs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getipnodebyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }, 
                    {
                        "type": "int *", 
                        "var": "error_num"
                    }
                ], 
                "return_type": "struct hostent *"
            }, 
            {
                "name": "getipnodebyaddr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "addr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "int *", 
                        "var": "error_num"
                    }
                ], 
                "return_type": "struct hostent *"
            }, 
            {
                "name": "freehostent", 
                "parameters": [
                    {
                        "type": "struct hostent *", 
                        "var": "ip"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getipnodebyname"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getline", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*lineptr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "n"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "getdelim", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*lineptr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "n"
                    }, 
                    {
                        "type": "int", 
                        "var": "delim"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "getline"
    }, 
    {
        "defines": [
            {
                "text": "_BSD_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "getloadavg", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "loadavg[]"
                    }, 
                    {
                        "type": "int", 
                        "var": "nelem"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "getloadavg"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setmntent", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "filename"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "type"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "getmntent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }
                ], 
                "return_type": "struct mntent *"
            }, 
            {
                "name": "addmntent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }, 
                    {
                        "type": "const struct mntent *", 
                        "var": "mnt"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "endmntent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "hasmntopt", 
                "parameters": [
                    {
                        "type": "const struct mntent *", 
                        "var": "mnt"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "opt"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "getmntent_r", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }, 
                    {
                        "type": "struct mntent *", 
                        "var": "mntbuf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "int", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "struct mntent *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "mntent.h"
            }, 
            {
                "comments": "", 
                "file_path": "mntent.h"
            }
        ], 
        "man_page": "getmntent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getnameinfo", 
                "parameters": [
                    {
                        "type": "const struct sockaddr *", 
                        "var": "sa"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "salen"
                    }, 
                    {
                        "type": "char *", 
                        "var": "host"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "hostlen"
                    }, 
                    {
                        "type": "char *", 
                        "var": "serv"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "servlen"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getnameinfo"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getnetent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct netent *"
            }, 
            {
                "name": "getnetbyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct netent *"
            }, 
            {
                "name": "getnetbyaddr", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "net"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }
                ], 
                "return_type": "struct netent *"
            }, 
            {
                "name": "setnetent", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "stayopen"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endnetent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getnetent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getnetent_r", 
                "parameters": [
                    {
                        "type": "struct netent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct netent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getnetbyname_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "struct netent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct netent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getnetbyaddr_r", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "net"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "struct netent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct netent *", 
                        "var": "*result"
                    }, 
                    {
                        "type": "int *", 
                        "var": "h_errnop"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getnetent_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getopt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "argc"
                    }, 
                    {
                        "type": "char * const", 
                        "var": "argv[]"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "optstring"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getopt_long", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "argc"
                    }, 
                    {
                        "type": "char * const", 
                        "var": "argv[]"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "optstring"
                    }, 
                    {
                        "type": "const struct option *", 
                        "var": "longopts"
                    }, 
                    {
                        "type": "int *", 
                        "var": "longindex"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getopt_long_only", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "argc"
                    }, 
                    {
                        "type": "char * const", 
                        "var": "argv[]"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "optstring"
                    }, 
                    {
                        "type": "const struct option *", 
                        "var": "longopts"
                    }, 
                    {
                        "type": "int *", 
                        "var": "longindex"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }, 
            {
                "comments": "", 
                "file_path": "getopt.h"
            }
        ], 
        "man_page": "getopt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getprotoent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct protoent *"
            }, 
            {
                "name": "getprotobyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct protoent *"
            }, 
            {
                "name": "getprotobynumber", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "proto"
                    }
                ], 
                "return_type": "struct protoent *"
            }, 
            {
                "name": "setprotoent", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "stayopen"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endprotoent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getprotoent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getprotoent_r", 
                "parameters": [
                    {
                        "type": "struct protoent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct protoent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getprotobyname_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "struct protoent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct protoent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getprotobynumber_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "proto"
                    }, 
                    {
                        "type": "struct protoent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct protoent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getprotoent_r"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "getpt", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "getpt"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "getpw", 
                "parameters": [
                    {
                        "type": "uid_t", 
                        "var": "uid"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "getpw"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getpwent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct passwd *"
            }, 
            {
                "name": "setpwent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endpwent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "getpwent"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "getpwent_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getpwnam", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct passwd *"
            }, 
            {
                "name": "getpwuid", 
                "parameters": [
                    {
                        "type": "uid_t", 
                        "var": "uid"
                    }
                ], 
                "return_type": "struct passwd *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "getpwnam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getrpcent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct rpcent *"
            }, 
            {
                "name": "getrpcbyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct rpcent *"
            }, 
            {
                "name": "getrpcbynumber", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "number"
                    }
                ], 
                "return_type": "struct rpcent *"
            }, 
            {
                "name": "setrpcent", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "stayopen"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endrpcent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getrpcent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getrpcent_r", 
                "parameters": [
                    {
                        "type": "struct rpcent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct rpcent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getrpcbyname_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "struct rpcent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct rpcent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getrpcbynumber_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "number"
                    }, 
                    {
                        "type": "struct rpcent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct rpcent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getrpcent_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getrpcport", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "host"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "prognum"
                    }, 
                    {
                        "type": "unsigned long", 
                        "var": "versnum"
                    }, 
                    {
                        "type": "unsigned", 
                        "var": "proto"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "rpc/rpc.h"
            }
        ], 
        "man_page": "getrpcport"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gets", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "gets"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getservent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct servent *"
            }, 
            {
                "name": "getservbyname", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "proto"
                    }
                ], 
                "return_type": "struct servent *"
            }, 
            {
                "name": "getservbyport", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "port"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "proto"
                    }
                ], 
                "return_type": "struct servent *"
            }, 
            {
                "name": "setservent", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "stayopen"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endservent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getservent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getservent_r", 
                "parameters": [
                    {
                        "type": "struct servent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct servent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getservbyname_r", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "proto"
                    }, 
                    {
                        "type": "struct servent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct servent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getservbyport_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "port"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "proto"
                    }, 
                    {
                        "type": "struct servent *", 
                        "var": "result_buf"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }, 
                    {
                        "type": "struct servent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "getservent_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getspnam", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "struct spwd *"
            }, 
            {
                "name": "getspent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct spwd *"
            }, 
            {
                "name": "setspent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endspent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "fgetspent", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }
                ], 
                "return_type": "struct spwd *"
            }, 
            {
                "name": "sgetspent", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "struct spwd *"
            }, 
            {
                "name": "putspent", 
                "parameters": [
                    {
                        "type": "const struct spwd *", 
                        "var": "p"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "lckpwdf", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ulckpwdf", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "shadow.h"
            }, 
            {
                "comments": "", 
                "file_path": "shadow.h"
            }
        ], 
        "man_page": "getspnam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getusershell", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "setusershell", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "endusershell", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "getusershell"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "getutmpx", 
                "parameters": [
                    {
                        "type": "const struct utmp *", 
                        "var": "u"
                    }, 
                    {
                        "type": "struct utmpx *", 
                        "var": "ux"
                    }
                ], 
                "return_type": "void getutmp(const struct utmpx *ux, struct utmp *u); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "utmpx.h"
            }
        ], 
        "man_page": "getutmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getw", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "putw", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "w"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "getw"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "getwchar", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "getwchar"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "globfree", 
                "parameters": [
                    {
                        "type": "glob_t *", 
                        "var": "pglob"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "glob.h"
            }
        ], 
        "man_page": "glob"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "gnu_get_libc_release", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "const char *gnu_get_libc_version(void); const char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "gnu/libc-version.h"
            }
        ], 
        "man_page": "gnu_get_libc_version"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "grantpt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "grantpt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*sighandler_t)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "int"
                    }
                ], 
                "return_type": "typedef void"
            }, 
            {
                "name": "gsignal", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "signum"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ssignal", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "signum"
                    }, 
                    {
                        "type": "sighandler_t", 
                        "var": "action"
                    }
                ], 
                "return_type": "sighandler_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "gsignal"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "db.h"
            }
        ], 
        "man_page": "hash"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "hcreate", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "nel"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "hsearch", 
                "parameters": [
                    {
                        "type": "ENTRY", 
                        "var": "item"
                    }, 
                    {
                        "type": "ACTION", 
                        "var": "action"
                    }
                ], 
                "return_type": "ENTRY *"
            }, 
            {
                "name": "hdestroy", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "hcreate_r", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "nel"
                    }, 
                    {
                        "type": "struct hsearch_data *", 
                        "var": "htab"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "hsearch_r", 
                "parameters": [
                    {
                        "type": "ENTRY", 
                        "var": "item"
                    }, 
                    {
                        "type": "ACTION", 
                        "var": "action"
                    }, 
                    {
                        "type": "ENTRY *", 
                        "var": "*retval"
                    }, 
                    {
                        "type": "struct hsearch_data *", 
                        "var": "htab"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "hdestroy_r", 
                "parameters": [
                    {
                        "type": "struct hsearch_data *", 
                        "var": "htab"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "search.h"
            }, 
            {
                "comments": "", 
                "file_path": "search.h"
            }
        ], 
        "man_page": "hsearch"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "hypot", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "hypotf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "hypotl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "hypot"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iconv", 
                "parameters": [
                    {
                        "type": "iconv_t", 
                        "var": "cd"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*inbuf"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "inbytesleft"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*outbuf"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "outbytesleft"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "iconv.h"
            }
        ], 
        "man_page": "iconv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iconv_close", 
                "parameters": [
                    {
                        "type": "iconv_t", 
                        "var": "cd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "iconv.h"
            }
        ], 
        "man_page": "iconv_close"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iconv_open", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "tocode"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "fromcode"
                    }
                ], 
                "return_type": "iconv_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "iconv.h"
            }
        ], 
        "man_page": "iconv_open"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "if_freenameindex", 
                "parameters": [
                    {
                        "type": "struct if_nameindex *", 
                        "var": "ptr"
                    }
                ], 
                "return_type": "struct if_nameindex *if_nameindex(void); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "net/if.h"
            }
        ], 
        "man_page": "if_nameindex"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "if_nametoindex", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "ifname"
                    }
                ], 
                "return_type": "unsigned int"
            }, 
            {
                "name": "if_indextoname", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "ifindex"
                    }, 
                    {
                        "type": "char *", 
                        "var": "ifname"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "net/if.h"
            }
        ], 
        "man_page": "if_nametoindex"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "index", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "rindex", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }
        ], 
        "man_page": "index"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inet_aton", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "cp"
                    }, 
                    {
                        "type": "struct in_addr *", 
                        "var": "inp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "inet_addr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "cp"
                    }
                ], 
                "return_type": "in_addr_t"
            }, 
            {
                "name": "inet_network", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "cp"
                    }
                ], 
                "return_type": "in_addr_t"
            }, 
            {
                "name": "inet_ntoa", 
                "parameters": [
                    {
                        "type": "struct in_addr", 
                        "var": "in"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "inet_makeaddr", 
                "parameters": [
                    {
                        "type": "in_addr_t", 
                        "var": "net"
                    }, 
                    {
                        "type": "in_addr_t", 
                        "var": "host"
                    }
                ], 
                "return_type": "struct in_addr"
            }, 
            {
                "name": "inet_lnaof", 
                "parameters": [
                    {
                        "type": "struct in_addr", 
                        "var": "in"
                    }
                ], 
                "return_type": "in_addr_t"
            }, 
            {
                "name": "inet_netof", 
                "parameters": [
                    {
                        "type": "struct in_addr", 
                        "var": "in"
                    }
                ], 
                "return_type": "in_addr_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "netinet/in.h"
            }, 
            {
                "comments": "", 
                "file_path": "arpa/inet.h"
            }
        ], 
        "man_page": "inet"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inet_net_pton", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pres"
                    }, 
                    {
                        "type": "void *", 
                        "var": "netp"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nsize"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "inet_net_ntop", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "netp"
                    }, 
                    {
                        "type": "int", 
                        "var": "bits"
                    }, 
                    {
                        "type": "char *", 
                        "var": "pres"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "psize"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "arpa/inet.h"
            }
        ], 
        "man_page": "inet_net_pton"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inet_ntop", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "char *", 
                        "var": "dst"
                    }, 
                    {
                        "type": "socklen_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "const char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "arpa/inet.h"
            }
        ], 
        "man_page": "inet_ntop"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "inet_pton", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "af"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "void *", 
                        "var": "dst"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "arpa/inet.h"
            }
        ], 
        "man_page": "inet_pton"
    }, 
    {
        "defines": [
            {
                "text": "_ISOC99_SOURCE      /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "INFINITY"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "infnan", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "error"
                    }
                ], 
                "return_type": "double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "infnan"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "initgroups", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "user"
                    }, 
                    {
                        "type": "gid_t", 
                        "var": "group"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "grp.h"
            }
        ], 
        "man_page": "initgroups"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "insque", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "elem"
                    }, 
                    {
                        "type": "void *", 
                        "var": "prev"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "remque", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "elem"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "search.h"
            }
        ], 
        "man_page": "insque"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "isxdigit", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int isalnum(int c); int isalpha(int c); int iscntrl(int c); int isdigit(int c); int isgraph(int c); int islower(int c); int isprint(int c); int ispunct(int c); int isspace(int c); int isupper(int c); int"
            }, 
            {
                "name": "isblank", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int isascii(int c); int"
            }, 
            {
                "name": "isxdigit_l", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "int isalnum_l(int c, locale_t locale); int isalpha_l(int c, locale_t locale); int isblank_l(int c, locale_t locale); int iscntrl_l(int c, locale_t locale); int isdigit_l(int c, locale_t locale); int isgraph_l(int c, locale_t locale); int islower_l(int c, locale_t locale); int isprint_l(int c, locale_t locale); int ispunct_l(int c, locale_t locale); int isspace_l(int c, locale_t locale); int isupper_l(int c, locale_t locale); int"
            }, 
            {
                "name": "isascii_l", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "ctype.h"
            }
        ], 
        "man_page": "isalpha"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "isatty", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "isatty"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "isfdtype", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "", 
                        "var": "intfdtype"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }
        ], 
        "man_page": "isfdtype"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "isgreater", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isgreaterequal", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isless", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "islessequal", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "islessgreater", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "isunordered", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "x"
                    }, 
                    {
                        "type": "", 
                        "var": "y"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "isgreater"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswalnum", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswalnum"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswalpha", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswalpha"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswblank", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswblank"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswcntrl", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswcntrl"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswctype", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "wctype_t", 
                        "var": "desc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswctype"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswdigit", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswdigit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswgraph", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswgraph"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswlower", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswlower"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswprint", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswprint"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswpunct", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswpunct"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswspace", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswspace"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswupper", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswupper"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "iswxdigit", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "iswxdigit"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "j0"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ldexp", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int", 
                        "var": "exp"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "ldexpf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "int", 
                        "var": "exp"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "ldexpl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int", 
                        "var": "exp"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "ldexp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "lgamma", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "lgammaf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "lgammal", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }, 
            {
                "name": "lgamma_r", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "signp"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "lgammaf_r", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "signp"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "lgammal_r", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "int *", 
                        "var": "signp"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "lgamma"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "lio_listio", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "struct aiocb *const", 
                        "var": "aiocb_list[]"
                    }, 
                    {
                        "type": "int", 
                        "var": "nitems"
                    }, 
                    {
                        "type": "struct sigevent *", 
                        "var": "sevp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "aio.h"
            }
        ], 
        "man_page": "lio_listio"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "localeconv", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "struct lconv *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "localeconv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "log", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "logf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "logl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "log"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "log10", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "log10f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "log10l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "log10"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "log1p", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "log1pf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "log1pl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "log1p"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "log2", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "log2f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "log2l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "log2"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "longjmp", 
                "parameters": [
                    {
                        "type": "jmp_buf", 
                        "var": "env"
                    }, 
                    {
                        "type": "int", 
                        "var": "val"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "siglongjmp", 
                "parameters": [
                    {
                        "type": "sigjmp_buf", 
                        "var": "env"
                    }, 
                    {
                        "type": "int", 
                        "var": "val"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "setjmp.h"
            }
        ], 
        "man_page": "longjmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "lrint", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "lrintf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "lrintl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "llrint", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }, 
            {
                "name": "llrintf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }, 
            {
                "name": "llrintl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "lrint"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "lround", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "lroundf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "lroundl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "llround", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }, 
            {
                "name": "llroundf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }, 
            {
                "name": "llroundl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long long int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "lround"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "int(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *lfind(const void *key, const void *base, size_t *nmemb, size_t size,"
            }, 
            {
                "name": "int(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *lsearch(const void *key, void *base, size_t *nmemb, size_t size,"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "search.h"
            }
        ], 
        "man_page": "lsearch"
    }, 
    {
        "defines": [
            {
                "text": "_BSD_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "makedev", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "maj"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "min"
                    }
                ], 
                "return_type": "dev_t"
            }, 
            {
                "name": "minor", 
                "parameters": [
                    {
                        "type": "dev_t", 
                        "var": "dev"
                    }
                ], 
                "return_type": "unsigned int major(dev_t dev); unsigned int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }
        ], 
        "man_page": "makedev"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "realloc", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "void *malloc(size_t size); void free(void *ptr); void *calloc(size_t nmemb, size_t size); void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "malloc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "malloc_get_state", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void*"
            }, 
            {
                "name": "malloc_set_state", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "state"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "malloc.h"
            }
        ], 
        "man_page": "malloc_get_state"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*__malloc_hook)", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "caller"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "(*__realloc_hook)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "caller"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "(*__memalign_hook)", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "alignment"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "caller"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "(*__free_hook)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "caller"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "(*__malloc_initialize_hook)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "(*__after_morecore_hook)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "malloc.h"
            }
        ], 
        "man_page": "malloc_hook"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "malloc_info", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "options"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "fp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "malloc.h"
            }
        ], 
        "man_page": "malloc_info"
    }, 
    {
        "defines": [
            {
                "text": "_SVID_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "matherr", 
                "parameters": [
                    {
                        "type": "struct exception *", 
                        "var": "exc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "matherr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mblen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mblen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbrlen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mbrlen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbrtowc", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "pwc"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mbrtowc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbsinit", 
                "parameters": [
                    {
                        "type": "const mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mbsinit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbsnrtowcs", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "*src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nms"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mbsnrtowcs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbsrtowcs", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "*src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mbsrtowcs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbstowcs", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mbstowcs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mbtowc", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "pwc"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mbtowc"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "MB_CUR_MAX"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "limits.h"
            }
        ], 
        "man_page": "MB_LEN_MAX"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*abortfunc)", 
                "parameters": [
                    {
                        "type": "enum mcheck_status", 
                        "var": "mstatus)"
                    }
                ], 
                "return_type": "int mcheck(void"
            }, 
            {
                "name": "(*abortfunc)", 
                "parameters": [
                    {
                        "type": "enum mcheck_status", 
                        "var": "mstatus)"
                    }
                ], 
                "return_type": "int mcheck_pedantic(void"
            }, 
            {
                "name": "mcheck_check_all", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "mprobe", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "ptr"
                    }
                ], 
                "return_type": "enum mcheck_status"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mcheck.h"
            }
        ], 
        "man_page": "mcheck"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memccpy", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memccpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memchr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "memrchr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "rawmemchr", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memchr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memcmp", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memcmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memcpy", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memcpy"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "memfrob", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memfrob"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "memmem", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "haystack"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "haystacklen"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "needle"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "needlelen"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memmem"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memmove", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memmove"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }, 
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "mempcpy", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const void *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "wmempcpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "mempcpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "memset", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "memset"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mkdtemp", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mkdtemp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mkfifo", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mkfifoat", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "dirfd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pathname"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/stat.h"
            }
        ], 
        "man_page": "mkfifo"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mkstemp", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mkostemp", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mkstemps", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }, 
                    {
                        "type": "int", 
                        "var": "suffixlen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mkostemps", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }, 
                    {
                        "type": "int", 
                        "var": "suffixlen"
                    }, 
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mkstemp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mktemp", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "template"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "mktemp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "modf", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double *", 
                        "var": "iptr"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "modff", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float *", 
                        "var": "iptr"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "modfl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double *", 
                        "var": "iptr"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "modf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mpool_open", 
                "parameters": [
                    {
                        "type": "DBT *", 
                        "var": "key"
                    }, 
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "pgno_t", 
                        "var": "pagesize"
                    }, 
                    {
                        "type": "pgno_t", 
                        "var": "maxcache"
                    }
                ], 
                "return_type": "MPOOL *"
            }, 
            {
                "name": "(*pgout)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": ""
                    }, 
                    {
                        "type": "", 
                        "var": "pgno_t"
                    }, 
                    {
                        "type": "void *", 
                        "var": ")"
                    }, 
                    {
                        "type": "void *", 
                        "var": "pgcookie"
                    }
                ], 
                "return_type": "void mpool_filter(MPOOL *mp, void (*pgin)(void *, pgno_t, void *), void"
            }, 
            {
                "name": "mpool_new", 
                "parameters": [
                    {
                        "type": "MPOOL *", 
                        "var": "mp"
                    }, 
                    {
                        "type": "pgno_t *", 
                        "var": "pgnoaddr"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "mpool_get", 
                "parameters": [
                    {
                        "type": "MPOOL *", 
                        "var": "mp"
                    }, 
                    {
                        "type": "pgno_t", 
                        "var": "pgno"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "mpool_put", 
                "parameters": [
                    {
                        "type": "MPOOL *", 
                        "var": "mp"
                    }, 
                    {
                        "type": "void *", 
                        "var": "pgaddr"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mpool_sync", 
                "parameters": [
                    {
                        "type": "MPOOL *", 
                        "var": "mp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mpool_close", 
                "parameters": [
                    {
                        "type": "MPOOL *", 
                        "var": "mp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "db.h"
            }, 
            {
                "comments": "", 
                "file_path": "mpool.h"
            }
        ], 
        "man_page": "mpool"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_close", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_close"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_getattr", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "struct mq_attr *", 
                        "var": "attr"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mq_setattr", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "const struct mq_attr *", 
                        "var": "newattr"
                    }, 
                    {
                        "type": "struct mq_attr *", 
                        "var": "oldattr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_getattr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_notify", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "const struct sigevent *", 
                        "var": "sevp"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_notify"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_open", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "oflag"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "struct mq_attr *", 
                        "var": "attr"
                    }
                ], 
                "return_type": "mqd_t mq_open(const char *name, int oflag); mqd_t"
            }
        ], 
        "includes": [
            {
                "comments": "/* For O_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "/* For mode constants */", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_open"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_receive", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "char *", 
                        "var": "msg_ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msg_len"
                    }, 
                    {
                        "type": "unsigned int *", 
                        "var": "msg_prio"
                    }
                ], 
                "return_type": "ssize_t"
            }, 
            {
                "name": "mq_timedreceive", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "char *", 
                        "var": "msg_ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msg_len"
                    }, 
                    {
                        "type": "unsigned int *", 
                        "var": "msg_prio"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "abs_timeout"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }, 
            {
                "comments": "", 
                "file_path": "time.h"
            }, 
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_receive"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_send", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "msg_ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msg_len"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "msg_prio"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "mq_timedsend", 
                "parameters": [
                    {
                        "type": "mqd_t", 
                        "var": "mqdes"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "msg_ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "msg_len"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "msg_prio"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "abs_timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }, 
            {
                "comments": "", 
                "file_path": "time.h"
            }, 
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_send"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "mq_unlink", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "mqueue.h"
            }
        ], 
        "man_page": "mq_unlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "NLMSG_ALIGN", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "NLMSG_LENGTH", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "NLMSG_SPACE", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "NLMSG_DATA", 
                "parameters": [
                    {
                        "type": "struct nlmsghdr *", 
                        "var": "nlh"
                    }
                ], 
                "return_type": "void *"
            }, 
            {
                "name": "NLMSG_NEXT", 
                "parameters": [
                    {
                        "type": "struct nlmsghdr *", 
                        "var": "nlh"
                    }, 
                    {
                        "type": "int", 
                        "var": "len"
                    }
                ], 
                "return_type": "struct nlmsghdr *"
            }, 
            {
                "name": "NLMSG_OK", 
                "parameters": [
                    {
                        "type": "struct nlmsghdr *", 
                        "var": "nlh"
                    }, 
                    {
                        "type": "int", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "NLMSG_PAYLOAD", 
                "parameters": [
                    {
                        "type": "struct nlmsghdr *", 
                        "var": "nlh"
                    }, 
                    {
                        "type": "int", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "asm/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/netlink.h"
            }
        ], 
        "man_page": "netlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "newlocale", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "category_mask"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "locale"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "base"
                    }
                ], 
                "return_type": "locale_t"
            }, 
            {
                "name": "freelocale", 
                "parameters": [
                    {
                        "type": "locale_t", 
                        "var": "locobj"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "newlocale"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "nl_langinfo", 
                "parameters": [
                    {
                        "type": "nl_item", 
                        "var": "item"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "langinfo.h"
            }
        ], 
        "man_page": "nl_langinfo"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "offsetof", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "type"
                    }, 
                    {
                        "type": "", 
                        "var": "member"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stddef.h"
            }
        ], 
        "man_page": "offsetof"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*function)", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "int"
                    }, 
                    {
                        "type": "void *", 
                        "var": ")"
                    }, 
                    {
                        "type": "void *", 
                        "var": "arg"
                    }
                ], 
                "return_type": "int on_exit(void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "on_exit"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fdopendir", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "DIR *opendir(const char *name); DIR *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "opendir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "openpty", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "amaster"
                    }, 
                    {
                        "type": "int *", 
                        "var": "aslave"
                    }, 
                    {
                        "type": "char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const struct termios *", 
                        "var": "termp"
                    }, 
                    {
                        "type": "const struct winsize *", 
                        "var": "winp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "forkpty", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "amaster"
                    }, 
                    {
                        "type": "char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const struct termios *", 
                        "var": "termp"
                    }, 
                    {
                        "type": "const struct winsize *", 
                        "var": "winp"
                    }
                ], 
                "return_type": "pid_t"
            }, 
            {
                "name": "login_tty", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pty.h"
            }, 
            {
                "comments": "", 
                "file_path": "utmp.h"
            }
        ], 
        "man_page": "openpty"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "popen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "command"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "type"
                    }
                ], 
                "return_type": "FILE *"
            }, 
            {
                "name": "pclose", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "popen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "posix_fallocate", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "off_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "posix_fallocate"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "valloc", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "int posix_memalign(void **memptr, size_t alignment, size_t size); void *aligned_alloc(size_t alignment, size_t size); void *"
            }, 
            {
                "name": "pvalloc", 
                "parameters": [
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "void *memalign(size_t alignment, size_t size); void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }, 
            {
                "comments": "", 
                "file_path": "malloc.h"
            }
        ], 
        "man_page": "posix_memalign"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "posix_openpt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "flags"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }, 
            {
                "comments": "", 
                "file_path": "fcntl.h"
            }
        ], 
        "man_page": "posix_openpt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pow", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "powf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "powl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "pow"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pow10", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "pow10f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "pow10l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "pow10"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "profil", 
                "parameters": [
                    {
                        "type": "unsigned short *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "bufsiz"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "offset"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "scale"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "profil"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "errno.h"
            }
        ], 
        "man_page": "program_invocation_name"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "psiginfo", 
                "parameters": [
                    {
                        "type": "const siginfo_t *", 
                        "var": "pinfo"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "void psignal(int sig, const char *s); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "psignal"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_destroy", 
                "parameters": [
                    {
                        "type": "pthread_attr_t *", 
                        "var": "attr"
                    }
                ], 
                "return_type": "int pthread_attr_init(pthread_attr_t *attr); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_init"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pthread_attr_getaffinity_np", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "cpusetsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "cpuset"
                    }
                ], 
                "return_type": "int pthread_attr_setaffinity_np(pthread_attr_t *attr, size_t cpusetsize, const cpu_set_t *cpuset); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setaffinity_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getdetachstate", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "int *", 
                        "var": "detachstate"
                    }
                ], 
                "return_type": "int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setdetachstate"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getguardsize", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "guardsize"
                    }
                ], 
                "return_type": "int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setguardsize"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getinheritsched", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "int *", 
                        "var": "inheritsched"
                    }
                ], 
                "return_type": "int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setinheritsched"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getschedparam", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "struct sched_param *", 
                        "var": "param"
                    }
                ], 
                "return_type": "int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setschedparam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getschedpolicy", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "int *", 
                        "var": "policy"
                    }
                ], 
                "return_type": "int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setschedpolicy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getscope", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "int *", 
                        "var": "scope"
                    }
                ], 
                "return_type": "int pthread_attr_setscope(pthread_attr_t *attr, int scope); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setscope"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getstack", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*stackaddr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "stacksize"
                    }
                ], 
                "return_type": "int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setstack"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getstackaddr", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*stackaddr"
                    }
                ], 
                "return_type": "int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setstackaddr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_attr_getstacksize", 
                "parameters": [
                    {
                        "type": "const pthread_attr_t *", 
                        "var": "attr"
                    }, 
                    {
                        "type": "size_t *", 
                        "var": "stacksize"
                    }
                ], 
                "return_type": "int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_attr_setstacksize"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_cancel", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_cancel"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_cleanup_pop", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "execute"
                    }
                ], 
                "return_type": "void pthread_cleanup_push(void (*routine)(void *), void *arg); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_cleanup_push"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_cleanup_pop_restore_np", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "execute"
                    }
                ], 
                "return_type": "void pthread_cleanup_push_defer_np(void (*routine)(void *), void *arg); void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_cleanup_push_defer_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*start_routine)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": ")"
                    }, 
                    {
                        "type": "void *", 
                        "var": "arg"
                    }
                ], 
                "return_type": "int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_create"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_detach", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_detach"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_equal", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "t1"
                    }, 
                    {
                        "type": "pthread_t", 
                        "var": "t2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_equal"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_exit", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "retval"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_exit"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pthread_getattr_np", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "pthread_attr_t *", 
                        "var": "attr"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_getattr_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_getcpuclockid", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "clockid_t *", 
                        "var": "clock_id"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }, 
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "pthread_getcpuclockid"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_join", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*retval"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_join"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_kill", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "pthread_kill"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_kill_other_threads_np", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_kill_other_threads_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_self", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "pthread_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_self"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pthread_getaffinity_np", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "cpusetsize"
                    }, 
                    {
                        "type": "cpu_set_t *", 
                        "var": "cpuset"
                    }
                ], 
                "return_type": "int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, const cpu_set_t *cpuset); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_setaffinity_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_setcanceltype", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "int *", 
                        "var": "oldtype"
                    }
                ], 
                "return_type": "int pthread_setcancelstate(int state, int *oldstate); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_setcancelstate"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_getconcurrency", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int pthread_setconcurrency(int new_level); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_setconcurrency"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_getname_np", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }
                ], 
                "return_type": "#define _GNU_SOURCE /* See feature_test_macros(7) */ #include <pthread.h> int pthread_setname_np(pthread_t thread, const char *name); int"
            }
        ], 
        "includes": [], 
        "man_page": "pthread_setname_np"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_getschedparam", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "int *", 
                        "var": "policy"
                    }, 
                    {
                        "type": "struct sched_param *", 
                        "var": "param"
                    }
                ], 
                "return_type": "int pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_setschedparam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_setschedprio", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "int", 
                        "var": "prio"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_setschedprio"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_sigmask", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "how"
                    }, 
                    {
                        "type": "const sigset_t *", 
                        "var": "set"
                    }, 
                    {
                        "type": "sigset_t *", 
                        "var": "oldset"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "pthread_sigmask"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_sigqueue", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "int", 
                        "var": "sig"
                    }, 
                    {
                        "type": "const union sigval", 
                        "var": "value"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }, 
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_sigqueue"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "pthread_testcancel", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_testcancel"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pthread_tryjoin_np", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*retval"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "pthread_timedjoin_np", 
                "parameters": [
                    {
                        "type": "pthread_t", 
                        "var": "thread"
                    }, 
                    {
                        "type": "void *", 
                        "var": "*retval"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "abstime"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_tryjoin_np"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "pthread_yield", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "pthread.h"
            }
        ], 
        "man_page": "pthread_yield"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }, 
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "ptsname", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ptsname_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "ptsname"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "putenv", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "string"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "putenv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "putpwent", 
                "parameters": [
                    {
                        "type": "const struct passwd *", 
                        "var": "p"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "pwd.h"
            }
        ], 
        "man_page": "putpwent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "fputc", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "fputs", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "putc", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "putchar", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "puts", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "puts"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "putwchar", 
                "parameters": [
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "putwchar"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void qsort(void *base, size_t nmemb, size_t size, int"
            }, 
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "void *", 
                        "var": ")"
                    }, 
                    {
                        "type": "void *", 
                        "var": "arg"
                    }
                ], 
                "return_type": "void qsort_r(void *base, size_t nmemb, size_t size, int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "qsort"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "LIST_REMOVE", 
                "parameters": [
                    {
                        "type": "TYPE *", 
                        "var": "elm"
                    }, 
                    {
                        "type": "LIST_ENTRY", 
                        "var": "NAME"
                    }
                ], 
                "return_type": "LIST_ENTRY(TYPE); LIST_HEAD(HEADNAME, TYPE); LIST_INIT(LIST_HEAD *head); LIST_INSERT_AFTER(LIST_ENTRY *listelm, TYPE *elm, LIST_ENTRY NAME); LIST_INSERT_HEAD(LIST_HEAD *head, TYPE *elm, LIST_ENTRY NAME);"
            }, 
            {
                "name": "TAILQ_REMOVE", 
                "parameters": [
                    {
                        "type": "TAILQ_HEAD *", 
                        "var": "head"
                    }, 
                    {
                        "type": "TYPE *", 
                        "var": "elm"
                    }, 
                    {
                        "type": "TAILQ_ENTRY", 
                        "var": "NAME"
                    }
                ], 
                "return_type": "TAILQ_ENTRY(TYPE); TAILQ_HEAD(HEADNAME, TYPE); TAILQ_INIT(TAILQ_HEAD *head); TAILQ_INSERT_AFTER(TAILQ_HEAD *head, TYPE *listelm, TYPE *elm, TAILQ_ENTRY NAME); TAILQ_INSERT_HEAD(TAILQ_HEAD *head, TYPE *elm, TAILQ_ENTRY NAME); TAILQ_INSERT_TAIL(TAILQ_HEAD *head, TYPE *elm, TAILQ_ENTRY NAME);"
            }, 
            {
                "name": "CIRCLEQ_REMOVE", 
                "parameters": [
                    {
                        "type": "CIRCLEQ_HEAD *", 
                        "var": "head"
                    }, 
                    {
                        "type": "TYPE *", 
                        "var": "elm"
                    }, 
                    {
                        "type": "CIRCLEQ_ENTRY", 
                        "var": "NAME"
                    }
                ], 
                "return_type": "CIRCLEQ_ENTRY(TYPE); CIRCLEQ_HEAD(HEADNAME, TYPE); CIRCLEQ_INIT(CIRCLEQ_HEAD *head); CIRCLEQ_INSERT_AFTER(CIRCLEQ_HEAD *head, TYPE *listelm, TYPE *elm, CIRCLEQ_ENTRY NAME); CIRCLEQ_INSERT_BEFORE(CIRCLEQ_HEAD *head, TYPE *listelm, TYPE *elm, CIRCLEQ_ENTRY NAME); CIRCLEQ_INSERT_HEAD(CIRCLEQ_HEAD *head, TYPE *elm, CIRCLEQ_ENTRY NAME); CIRCLEQ_INSERT_TAIL(CIRCLEQ_HEAD *head, TYPE *elm, CIRCLEQ_ENTRY NAME);"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/queue.h"
            }
        ], 
        "man_page": "queue"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "raise", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "raise"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rand", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rand_r", 
                "parameters": [
                    {
                        "type": "unsigned int *", 
                        "var": "seedp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "srand", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seed"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "rand"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "random", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "srandom", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seed"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "initstate", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seed"
                    }, 
                    {
                        "type": "char *", 
                        "var": "state"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "setstate", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "state"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "random"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "random_r", 
                "parameters": [
                    {
                        "type": "struct random_data *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "int32_t *", 
                        "var": "result"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "srandom_r", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seed"
                    }, 
                    {
                        "type": "struct random_data *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "initstate_r", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seed"
                    }, 
                    {
                        "type": "char *", 
                        "var": "statebuf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "statelen"
                    }, 
                    {
                        "type": "struct random_data *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "setstate_r", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "statebuf"
                    }, 
                    {
                        "type": "struct random_data *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "random_r"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rcmd", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*ahost"
                    }, 
                    {
                        "type": "unsigned short", 
                        "var": "inport"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "locuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "remuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "int *", 
                        "var": "fd2p"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rresvport", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "port"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "iruserok", 
                "parameters": [
                    {
                        "type": "uint32_t", 
                        "var": "raddr"
                    }, 
                    {
                        "type": "int", 
                        "var": "superuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "ruser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "luser"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ruserok", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "rhost"
                    }, 
                    {
                        "type": "int", 
                        "var": "superuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "ruser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "luser"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rcmd_af", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*ahost"
                    }, 
                    {
                        "type": "unsigned short", 
                        "var": "inport"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "locuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "remuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "int *", 
                        "var": "fd2p"
                    }, 
                    {
                        "type": "sa_family_t", 
                        "var": "af"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rresvport_af", 
                "parameters": [
                    {
                        "type": "int *", 
                        "var": "port"
                    }, 
                    {
                        "type": "sa_family_t", 
                        "var": "af"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "iruserok_af", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "raddr"
                    }, 
                    {
                        "type": "int", 
                        "var": "superuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "ruser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "luser"
                    }, 
                    {
                        "type": "sa_family_t", 
                        "var": "af"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "ruserok_af", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "rhost"
                    }, 
                    {
                        "type": "int", 
                        "var": "superuser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "ruser"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "luser"
                    }, 
                    {
                        "type": "sa_family_t", 
                        "var": "af"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "on some systems */", 
                "file_path": "netdb.h> \u00a0\u00a0/* Or <unistd.h"
            }
        ], 
        "man_page": "rcmd"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "readdir", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }
                ], 
                "return_type": "struct dirent *"
            }, 
            {
                "name": "readdir_r", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }, 
                    {
                        "type": "struct dirent *", 
                        "var": "entry"
                    }, 
                    {
                        "type": "struct dirent *", 
                        "var": "*result"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "readdir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "realpath", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "path"
                    }, 
                    {
                        "type": "char *", 
                        "var": "resolved_path"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "limits.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "realpath"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "db.h"
            }
        ], 
        "man_page": "recno"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "regcomp", 
                "parameters": [
                    {
                        "type": "regex_t *", 
                        "var": "preg"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "regex"
                    }, 
                    {
                        "type": "int", 
                        "var": "cflags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "regexec", 
                "parameters": [
                    {
                        "type": "const regex_t *", 
                        "var": "preg"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "string"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nmatch"
                    }, 
                    {
                        "type": "regmatch_t", 
                        "var": "pmatch[]"
                    }, 
                    {
                        "type": "int", 
                        "var": "eflags"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "regerror", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errcode"
                    }, 
                    {
                        "type": "const regex_t *", 
                        "var": "preg"
                    }, 
                    {
                        "type": "char *", 
                        "var": "errbuf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "errbuf_size"
                    }
                ], 
                "return_type": "size_t"
            }, 
            {
                "name": "regfree", 
                "parameters": [
                    {
                        "type": "regex_t *", 
                        "var": "preg"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "regex.h"
            }
        ], 
        "man_page": "regex"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "remainderl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "/* The C99 versions */ double remainder(double x, double y); float remainderf(float x, float y); long double"
            }, 
            {
                "name": "dreml", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }
                ], 
                "return_type": "/* Obsolete synonyms */ double drem(double x, double y); float dremf(float x, float y); long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "remainder"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "remquo", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double", 
                        "var": "y"
                    }, 
                    {
                        "type": "int *", 
                        "var": "quo"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "remquof", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float", 
                        "var": "y"
                    }, 
                    {
                        "type": "int *", 
                        "var": "quo"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "remquol", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double", 
                        "var": "y"
                    }, 
                    {
                        "type": "int *", 
                        "var": "quo"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "remquo"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "res_init", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "res_query", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "dname"
                    }, 
                    {
                        "type": "int", 
                        "var": "class"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "answer"
                    }, 
                    {
                        "type": "int", 
                        "var": "anslen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "res_search", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "dname"
                    }, 
                    {
                        "type": "int", 
                        "var": "class"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "answer"
                    }, 
                    {
                        "type": "int", 
                        "var": "anslen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "res_querydomain", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "domain"
                    }, 
                    {
                        "type": "int", 
                        "var": "class"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "answer"
                    }, 
                    {
                        "type": "int", 
                        "var": "anslen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "res_mkquery", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "op"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "dname"
                    }, 
                    {
                        "type": "int", 
                        "var": "class"
                    }, 
                    {
                        "type": "int", 
                        "var": "type"
                    }, 
                    {
                        "type": "const unsigned char *", 
                        "var": "data"
                    }, 
                    {
                        "type": "int", 
                        "var": "datalen"
                    }, 
                    {
                        "type": "const unsigned char *", 
                        "var": "newrr"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "int", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "res_send", 
                "parameters": [
                    {
                        "type": "const unsigned char *", 
                        "var": "msg"
                    }, 
                    {
                        "type": "int", 
                        "var": "msglen"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "answer"
                    }, 
                    {
                        "type": "int", 
                        "var": "anslen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "dn_comp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "exp_dn"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "comp_dn"
                    }, 
                    {
                        "type": "int", 
                        "var": "length"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "*dnptrs"
                    }, 
                    {
                        "type": "unsigned char *", 
                        "var": "*lastdnptr"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "dn_expand", 
                "parameters": [
                    {
                        "type": "const unsigned char *", 
                        "var": "msg"
                    }, 
                    {
                        "type": "const unsigned char *", 
                        "var": "eomorig"
                    }, 
                    {
                        "type": "const unsigned char *", 
                        "var": "comp_dn"
                    }, 
                    {
                        "type": "char *", 
                        "var": "exp_dn"
                    }, 
                    {
                        "type": "int", 
                        "var": "length"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netinet/in.h"
            }, 
            {
                "comments": "", 
                "file_path": "arpa/nameser.h"
            }, 
            {
                "comments": "", 
                "file_path": "resolv.h"
            }
        ], 
        "man_page": "resolver"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rewinddir", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "rewinddir"
    }, 
    {
        "defines": [
            {
                "text": "_BSD_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "rexec", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*ahost"
                    }, 
                    {
                        "type": "int", 
                        "var": "inport"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "user"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "passwd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "int *", 
                        "var": "fd2p"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "rexec_af", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*ahost"
                    }, 
                    {
                        "type": "int", 
                        "var": "inport"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "user"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "passwd"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "cmd"
                    }, 
                    {
                        "type": "int *", 
                        "var": "fd2p"
                    }, 
                    {
                        "type": "sa_family_t", 
                        "var": "af"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "rexec"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "nearbyint", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "nearbyintf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "nearbyintl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }, 
            {
                "name": "rint", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "rintf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "rintl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "rint"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "round", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "roundf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "roundl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "round"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rpmatch", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "response"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "rpmatch"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "rtime", 
                "parameters": [
                    {
                        "type": "struct sockaddr_in *", 
                        "var": "addrp"
                    }, 
                    {
                        "type": "struct rpc_timeval *", 
                        "var": "timep"
                    }, 
                    {
                        "type": "struct rpc_timeval *", 
                        "var": "timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "rpc/auth_des.h"
            }
        ], 
        "man_page": "rtime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const struct dirent *", 
                        "var": "*"
                    }, 
                    {
                        "type": "const struct dirent *", 
                        "var": "*)"
                    }
                ], 
                "return_type": "int scandir(const char *dirp, struct dirent ***namelist, int (*filter)(const struct dirent *), int"
            }, 
            {
                "name": "alphasort", 
                "parameters": [
                    {
                        "type": "const struct dirent *", 
                        "var": "*a"
                    }, 
                    {
                        "type": "const struct dirent *", 
                        "var": "*b"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "versionsort", 
                "parameters": [
                    {
                        "type": "const struct dirent *", 
                        "var": "*a"
                    }, 
                    {
                        "type": "const struct dirent *", 
                        "var": "*b"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "dirent.h"
            }, 
            {
                "comments": "/* Definition of AT_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "scandir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sscanf", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "format"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "int scanf(const char *format, ...); int fscanf(FILE *stream, const char *format, ...); int"
            }, 
            {
                "name": "vfscanf", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "format"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "ap"
                    }
                ], 
                "return_type": "int vscanf(const char *format, va_list ap); int vsscanf(const char *str, const char *format, va_list ap); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "stdarg.h"
            }
        ], 
        "man_page": "scanf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sched_getcpu", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sched.h"
            }
        ], 
        "man_page": "sched_getcpu"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "seekdir", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }, 
                    {
                        "type": "long", 
                        "var": "loc"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "seekdir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_close", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_close"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_destroy", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_destroy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_getvalue", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sval"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_getvalue"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_init", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }, 
                    {
                        "type": "int", 
                        "var": "pshared"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "value"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_init"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_open", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "int", 
                        "var": "oflag"
                    }, 
                    {
                        "type": "mode_t", 
                        "var": "mode"
                    }, 
                    {
                        "type": "unsigned int", 
                        "var": "value"
                    }
                ], 
                "return_type": "sem_t *sem_open(const char *name, int oflag); sem_t *"
            }
        ], 
        "includes": [
            {
                "comments": "/* For O_* constants */", 
                "file_path": "fcntl.h"
            }, 
            {
                "comments": "/* For mode constants */", 
                "file_path": "sys/stat.h"
            }, 
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_open"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_post", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_post"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_unlink", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_unlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sem_wait", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sem_trywait", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sem_timedwait", 
                "parameters": [
                    {
                        "type": "sem_t *", 
                        "var": "sem"
                    }, 
                    {
                        "type": "const struct timespec *", 
                        "var": "abs_timeout"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "semaphore.h"
            }
        ], 
        "man_page": "sem_wait"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setbuf", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "setbuffer", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "setlinebuf", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "setvbuf", 
                "parameters": [
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "int", 
                        "var": "mode"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "setbuf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setenv", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "value"
                    }, 
                    {
                        "type": "int", 
                        "var": "overwrite"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "unsetenv", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "setenv"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setlocale", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "category"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "locale"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "setlocale"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setlogmask", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "mask"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "syslog.h"
            }
        ], 
        "man_page": "setlogmask"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "setnetgrent", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "netgroup"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "endnetgrent", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "getnetgrent", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*host"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*user"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*domain"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "getnetgrent_r", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*host"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*user"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*domain"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "innetgr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "netgroup"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "host"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "user"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "domain"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "netdb.h"
            }
        ], 
        "man_page": "setnetgrent"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "siginterrupt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sig"
                    }, 
                    {
                        "type": "int", 
                        "var": "flag"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "siginterrupt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sigpause", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sigmask"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "sigpause", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "sigpause"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sigwait", 
                "parameters": [
                    {
                        "type": "const sigset_t *", 
                        "var": "set"
                    }, 
                    {
                        "type": "int *", 
                        "var": "sig"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "signal.h"
            }
        ], 
        "man_page": "sigwait"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sin", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "sinf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "sinl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "sin"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "sincos", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }, 
                    {
                        "type": "double *", 
                        "var": "sin"
                    }, 
                    {
                        "type": "double *", 
                        "var": "cos"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "sincosf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }, 
                    {
                        "type": "float *", 
                        "var": "sin"
                    }, 
                    {
                        "type": "float *", 
                        "var": "cos"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "sincosl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }, 
                    {
                        "type": "long double *", 
                        "var": "sin"
                    }, 
                    {
                        "type": "long double *", 
                        "var": "cos"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "sincos"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sinh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "sinhf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "sinhl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "sinh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sleep", 
                "parameters": [
                    {
                        "type": "unsigned int", 
                        "var": "seconds"
                    }
                ], 
                "return_type": "unsigned int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "sleep"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sqrt", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "sqrtf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "sqrtl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "sqrt"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "stdin"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "stpcpy", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "stpcpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "stpncpy", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "stpncpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strcasecmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "strncasecmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "strings.h"
            }
        ], 
        "man_page": "strcasecmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strcat", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strncat", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strcat"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "strchr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strrchr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strchrnul", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }, 
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strchr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strcmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "strncmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strcmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strcoll", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strcoll"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strcpy", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strncpy", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strcpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strdup", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strndup", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strdupa", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strndupa", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strdup"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strerror", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errnum"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strerror_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errnum"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "strerror_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errnum"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strerror_l", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "errnum"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strerror"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "strfry", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "string"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strfry"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strftime", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "max"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "format"
                    }, 
                    {
                        "type": "const struct tm *", 
                        "var": "tm"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "strftime"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strlen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strlen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strnlen", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "maxlen"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strnlen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strpbrk", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "accept"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strpbrk"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strsep", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "*stringp"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "delim"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strsep"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strsignal", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "sig"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strsignal"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strspn", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "accept"
                    }
                ], 
                "return_type": "size_t"
            }, 
            {
                "name": "strcspn", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "reject"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strspn"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "strstr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "haystack"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "needle"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strcasestr", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "haystack"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "needle"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }, 
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strstr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strtoimax", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "intmax_t"
            }, 
            {
                "name": "strtoumax", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "uintmax_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "inttypes.h"
            }
        ], 
        "man_page": "strtoimax"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strtok", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "delim"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "strtok_r", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "str"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "delim"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*saveptr"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strtok"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strtol", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "long int"
            }, 
            {
                "name": "strtoll", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "long long int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "strtol"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strtoul", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "unsigned long int"
            }, 
            {
                "name": "strtoull", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "char *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "unsigned long long int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "strtoul"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "strverscmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strverscmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "strxfrm", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "string.h"
            }
        ], 
        "man_page": "strxfrm"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "swab", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "from"
                    }, 
                    {
                        "type": "void *", 
                        "var": "to"
                    }, 
                    {
                        "type": "ssize_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "swab"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "sysconf", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "name"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "sysconf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "system", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "command"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "system"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tan", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "tanf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "tanl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "tan"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tanh", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "tanhf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "tanhl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "tanh"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "telldir", 
                "parameters": [
                    {
                        "type": "DIR *", 
                        "var": "dirp"
                    }
                ], 
                "return_type": "long"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "dirent.h"
            }
        ], 
        "man_page": "telldir"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tempnam", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "dir"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "pfx"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "tempnam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tcgetattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "struct termios *", 
                        "var": "termios_p"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tcsetattr", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "optional_actions"
                    }, 
                    {
                        "type": "const struct termios *", 
                        "var": "termios_p"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tcsendbreak", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "duration"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tcdrain", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tcflush", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "queue_selector"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tcflow", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "int", 
                        "var": "action"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "cfmakeraw", 
                "parameters": [
                    {
                        "type": "struct termios *", 
                        "var": "termios_p"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "cfgetispeed", 
                "parameters": [
                    {
                        "type": "const struct termios *", 
                        "var": "termios_p"
                    }
                ], 
                "return_type": "speed_t"
            }, 
            {
                "name": "cfgetospeed", 
                "parameters": [
                    {
                        "type": "const struct termios *", 
                        "var": "termios_p"
                    }
                ], 
                "return_type": "speed_t"
            }, 
            {
                "name": "cfsetispeed", 
                "parameters": [
                    {
                        "type": "struct termios *", 
                        "var": "termios_p"
                    }, 
                    {
                        "type": "speed_t", 
                        "var": "speed"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "cfsetospeed", 
                "parameters": [
                    {
                        "type": "struct termios *", 
                        "var": "termios_p"
                    }, 
                    {
                        "type": "speed_t", 
                        "var": "speed"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "cfsetspeed", 
                "parameters": [
                    {
                        "type": "struct termios *", 
                        "var": "termios_p"
                    }, 
                    {
                        "type": "speed_t", 
                        "var": "speed"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "termios.h"
            }, 
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "termios"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timelocal", 
                "parameters": [
                    {
                        "type": "struct tm *", 
                        "var": "tm"
                    }
                ], 
                "return_type": "time_t"
            }, 
            {
                "name": "timegm", 
                "parameters": [
                    {
                        "type": "struct tm *", 
                        "var": "tm"
                    }
                ], 
                "return_type": "time_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "timegm"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "timeradd", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "a"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "b"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "res"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "timersub", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "a"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "b"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "res"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "timerclear", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "tvp"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "timerisset", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "tvp"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "timercmp", 
                "parameters": [
                    {
                        "type": "struct timeval *", 
                        "var": "a"
                    }, 
                    {
                        "type": "struct timeval *", 
                        "var": "b"
                    }, 
                    {
                        "type": "", 
                        "var": "CMP"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/time.h"
            }
        ], 
        "man_page": "timeradd"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tmpfile", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "FILE *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "tmpfile"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tmpnam", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }
                ], 
                "return_type": "char *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }
        ], 
        "man_page": "tmpnam"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "toascii", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "ctype.h"
            }
        ], 
        "man_page": "toascii"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "toupper", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tolower", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }, 
            {
                "name": "tolower_l", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "int toupper_l(int c, locale_t locale); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "ctype.h"
            }
        ], 
        "man_page": "toupper"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "towctrans", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "wctrans_t", 
                        "var": "desc"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "towctrans"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "towlower", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "wint_t"
            }, 
            {
                "name": "towlower_l", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "towlower"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "towupper", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "wint_t"
            }, 
            {
                "name": "towupper_l", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "locale_t", 
                        "var": "locale"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "towupper"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "trunc", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "truncf", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "truncl", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "trunc"
    }, 
    {
        "defines": [
            {
                "text": "_GNU_SOURCE         /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *tsearch(const void *key, void **rootp, int"
            }, 
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *tfind(const void *key, void *const *rootp, int"
            }, 
            {
                "name": "(*compar)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": ""
                    }, 
                    {
                        "type": "const void *", 
                        "var": ")"
                    }
                ], 
                "return_type": "void *tdelete(const void *key, void **rootp, int"
            }, 
            {
                "name": "(*action)", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "nodep"
                    }, 
                    {
                        "type": "const VISIT", 
                        "var": "which"
                    }, 
                    {
                        "type": "const int", 
                        "var": "depth)"
                    }
                ], 
                "return_type": "void twalk(const void *root, void"
            }, 
            {
                "name": "(*free_node)", 
                "parameters": [
                    {
                        "type": "void *", 
                        "var": "nodep)"
                    }
                ], 
                "return_type": "void tdestroy(void *root, void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "search.h"
            }, 
            {
                "comments": "", 
                "file_path": "search.h"
            }
        ], 
        "man_page": "tsearch"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ttyname", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "char *"
            }, 
            {
                "name": "ttyname_r", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "char *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "buflen"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "ttyname"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "tzset", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "void"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "time.h"
            }
        ], 
        "man_page": "tzset"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ualarm", 
                "parameters": [
                    {
                        "type": "useconds_t", 
                        "var": "usecs"
                    }, 
                    {
                        "type": "useconds_t", 
                        "var": "interval"
                    }
                ], 
                "return_type": "useconds_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "ualarm"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "ungetwc", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "wint_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "ungetwc"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "putchar_unlocked", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "c"
                    }
                ], 
                "return_type": "int getc_unlocked(FILE *stream); int getchar_unlocked(void); int putc_unlocked(int c, FILE *stream); int"
            }, 
            {
                "name": "fwrite_unlocked", 
                "parameters": [
                    {
                        "type": "const void *", 
                        "var": "ptr"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "size"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "void clearerr_unlocked(FILE *stream); int feof_unlocked(FILE *stream); int ferror_unlocked(FILE *stream); int fileno_unlocked(FILE *stream); int fflush_unlocked(FILE *stream); int fgetc_unlocked(FILE *stream); int fputc_unlocked(int c, FILE *stream); size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream); size_t"
            }, 
            {
                "name": "fputs_unlocked", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "char *fgets_unlocked(char *s, int n, FILE *stream); int"
            }, 
            {
                "name": "fputws_unlocked", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "ws"
                    }, 
                    {
                        "type": "FILE *", 
                        "var": "stream"
                    }
                ], 
                "return_type": "wint_t getwc_unlocked(FILE *stream); wint_t getwchar_unlocked(void); wint_t fgetwc_unlocked(FILE *stream); wint_t fputwc_unlocked(wchar_t wc, FILE *stream); wint_t putwc_unlocked(wchar_t wc, FILE *stream); wint_t putwchar_unlocked(wchar_t wc); wchar_t *fgetws_unlocked(wchar_t *ws, int n, FILE *stream); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "unlocked_stdio"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "unlockpt", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "unlockpt"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "updwtmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "wtmp_file"
                    }, 
                    {
                        "type": "const struct utmp *", 
                        "var": "ut"
                    }
                ], 
                "return_type": "void"
            }, 
            {
                "name": "logwtmp", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "line"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "name"
                    }, 
                    {
                        "type": "const char *", 
                        "var": "host"
                    }
                ], 
                "return_type": "void"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "utmp.h"
            }
        ], 
        "man_page": "updwtmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "uselocale", 
                "parameters": [
                    {
                        "type": "locale_t", 
                        "var": "newloc"
                    }
                ], 
                "return_type": "locale_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "uselocale"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "usleep", 
                "parameters": [
                    {
                        "type": "useconds_t", 
                        "var": "usec"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "usleep"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcpcpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcpcpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcpncpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcpncpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcrtomb", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcrtomb"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcscasecmp", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcscasecmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcscat", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcscat"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcschr", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcschr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcscmp", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "s2"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcscmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcscpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcscpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcscspn", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "reject"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcscspn"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsdup", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsdup"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcslen", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcslen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsncasecmp", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsncasecmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsncat", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsncat"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsncmp", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsncmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsncpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsncpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsnlen", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "maxlen"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsnlen"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsnrtombs", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "*src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "nwc"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsnrtombs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcspbrk", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "accept"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcspbrk"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsrchr", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsrchr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsrtombs", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "*src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "len"
                    }, 
                    {
                        "type": "mbstate_t *", 
                        "var": "ps"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsrtombs"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsspn", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "accept"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsspn"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcsstr", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "haystack"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "needle"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcsstr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcstoimax", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "wchar_t *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "intmax_t"
            }, 
            {
                "name": "wcstoumax", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "nptr"
                    }, 
                    {
                        "type": "wchar_t *", 
                        "var": "*endptr"
                    }, 
                    {
                        "type": "int", 
                        "var": "base"
                    }
                ], 
                "return_type": "uintmax_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stddef.h"
            }, 
            {
                "comments": "", 
                "file_path": "inttypes.h"
            }
        ], 
        "man_page": "wcstoimax"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcstok", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "delim"
                    }, 
                    {
                        "type": "wchar_t *", 
                        "var": "*ptr"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcstok"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wcstombs", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "size_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "wcstombs"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE             /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "wcswidth", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcswidth"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wctob", 
                "parameters": [
                    {
                        "type": "wint_t", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wctob"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wctomb", 
                "parameters": [
                    {
                        "type": "char *", 
                        "var": "s"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdlib.h"
            }
        ], 
        "man_page": "wctomb"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wctrans", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "wctrans_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "wctrans"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wctype", 
                "parameters": [
                    {
                        "type": "const char *", 
                        "var": "name"
                    }
                ], 
                "return_type": "wctype_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wctype.h"
            }
        ], 
        "man_page": "wctype"
    }, 
    {
        "defines": [
            {
                "text": "_XOPEN_SOURCE       /* See feature_test_macros(7) */"
            }
        ], 
        "functions": [
            {
                "name": "wcwidth", 
                "parameters": [
                    {
                        "type": "wchar_t", 
                        "var": "c"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wcwidth"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wmemchr", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "c"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wmemchr"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wmemcmp", 
                "parameters": [
                    {
                        "type": "const wchar_t *", 
                        "var": "s1"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "s2"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wmemcmp"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wmemcpy", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wmemcpy"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wmemmove", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "dest"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "src"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wmemmove"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "wmemset", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "wchar_t", 
                        "var": "wc"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "n"
                    }
                ], 
                "return_type": "wchar_t *"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wmemset"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "swprintf", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "maxlen"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "format"
                    }, 
                    {
                        "type": "", 
                        "var": "..."
                    }
                ], 
                "return_type": "int wprintf(const wchar_t *format, ...); int fwprintf(FILE *stream, const wchar_t *format, ...); int"
            }, 
            {
                "name": "vswprintf", 
                "parameters": [
                    {
                        "type": "wchar_t *", 
                        "var": "wcs"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "maxlen"
                    }, 
                    {
                        "type": "const wchar_t *", 
                        "var": "format"
                    }, 
                    {
                        "type": "va_list", 
                        "var": "args"
                    }
                ], 
                "return_type": "int vwprintf(const wchar_t *format, va_list args); int vfwprintf(FILE *stream, const wchar_t *format, va_list args); int"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "stdio.h"
            }, 
            {
                "comments": "", 
                "file_path": "wchar.h"
            }
        ], 
        "man_page": "wprintf"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "y0", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "y1", 
                "parameters": [
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "yn", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "n"
                    }, 
                    {
                        "type": "double", 
                        "var": "x"
                    }
                ], 
                "return_type": "double"
            }, 
            {
                "name": "y0f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "y1f", 
                "parameters": [
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "ynf", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "n"
                    }, 
                    {
                        "type": "float", 
                        "var": "x"
                    }
                ], 
                "return_type": "float"
            }, 
            {
                "name": "y0l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }, 
            {
                "name": "y1l", 
                "parameters": [
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }, 
            {
                "name": "ynl", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "n"
                    }, 
                    {
                        "type": "long double", 
                        "var": "x"
                    }
                ], 
                "return_type": "long double"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }
        ], 
        "man_page": "y0"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "write", 
                "parameters": [
                    {
                        "type": "int", 
                        "var": "fd"
                    }, 
                    {
                        "type": "void *", 
                        "var": "buf"
                    }, 
                    {
                        "type": "size_t", 
                        "var": "count"
                    }
                ], 
                "return_type": "ssize_t"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "unistd.h"
            }
        ], 
        "man_page": "write"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "/* for HDIO_GETGEO */", 
                "file_path": "linux/hdreg.h"
            }, 
            {
                "comments": "/* for BLKGETSIZE and BLKRRPART */", 
                "file_path": "linux/fs.h"
            }
        ], 
        "man_page": "sd"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "MTIOCPOS,", 
                "parameters": [
                    {
                        "type": "struct mtpos *", 
                        "var": ")mt_pos"
                    }
                ], 
                "return_type": "int ioctl(int fd, int request [, (void *)arg3]); int ioctl(int fd, MTIOCTOP, (struct mtop *)mt_cmd); int ioctl(int fd, MTIOCGET, (struct mtget *)mt_status); int ioctl(int fd,"
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/mtio.h"
            }
        ], 
        "man_page": "st"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "elf.h"
            }
        ], 
        "man_page": "elf"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "features.h"
            }
        ], 
        "man_page": "feature_test_macros"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "linux/futex.h"
            }
        ], 
        "man_page": "futex"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "locale.h"
            }
        ], 
        "man_page": "locale"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "math.h"
            }, 
            {
                "comments": "", 
                "file_path": "errno.h"
            }, 
            {
                "comments": "", 
                "file_path": "fenv.h"
            }
        ], 
        "man_page": "math_error"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "socket", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "AF_NETLINK"
                    }, 
                    {
                        "type": "", 
                        "var": "socket_type"
                    }, 
                    {
                        "type": "", 
                        "var": "netlink_family"
                    }
                ], 
                "return_type": "netlink_socket ="
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "asm/types.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/netlink.h"
            }
        ], 
        "man_page": "netlink"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "socket", 
                "parameters": [
                    {
                        "type": "", 
                        "var": "AF_PACKET"
                    }, 
                    {
                        "type": "int", 
                        "var": "socket_type"
                    }, 
                    {
                        "type": "int", 
                        "var": "protocol"
                    }
                ], 
                "return_type": "packet_socket ="
            }
        ], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/socket.h"
            }, 
            {
                "comments": "", 
                "file_path": "linux/if_packet.h"
            }, 
            {
                "comments": "/* the L2 protocols */", 
                "file_path": "net/ethernet.h"
            }
        ], 
        "man_page": "packet"
    }, 
    {
        "defines": [], 
        "functions": [
            {
                "name": "(*sigev_notify_function)", 
                "parameters": [
                    {
                        "type": "union", 
                        "var": "sigval"
                    }
                ], 
                "return_type": "struct sigevent { int sigev_notify; /* Notification method */ int sigev_signo; /* Notification signal */ union sigval sigev_value; /* Data passed with notification */ void"
            }
        ], 
        "includes": [], 
        "man_page": "sigevent"
    }, 
    {
        "defines": [], 
        "functions": [], 
        "includes": [
            {
                "comments": "", 
                "file_path": "sys/msg.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/sem.h"
            }, 
            {
                "comments": "", 
                "file_path": "sys/shm.h"
            }
        ], 
        "man_page": "svipc"
    }
]
