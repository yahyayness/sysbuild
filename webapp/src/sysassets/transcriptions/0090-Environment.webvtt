WEBVTT

00:00.000 --> 00:04.093
<v Lawrence Angrave>hi so this video is about the environment

00:04.093 --> 00:09.078
<v Lawrence Angrave>so in addition to being able to set arguments to our little programs

00:09.078 --> 00:12.687
<v Lawrence Angrave>each program also has access to environment variables

00:12.687 --> 00:14.343
<v Lawrence Angrave>let's have a look at those now

00:14.343 --> 00:16.703
<v Lawrence Angrave>so in my shell over here

00:16.703 --> 00:17.718
<v Lawrence Angrave>so my terminal window

00:17.718 --> 00:19.578
<v Lawrence Angrave>if i type for example set

00:19.578 --> 00:22.437
<v Lawrence Angrave>i can see a list of environment variables

00:22.437 --> 00:27.406
<v Lawrence Angrave>so these can be used by the shell and any other programs that we start to help configure their behavior

00:27.406 --> 00:33.328
<v Lawrence Angrave>for example we see down here that I am running as superuser

00:33.328 --> 00:36.296
<v Lawrence Angrave>as the root on this little system here

00:36.296 --> 00:40.359
<v Lawrence Angrave>we can also see that my home directory is in slash root

00:40.359 --> 00:44.078
<v Lawrence Angrave>so that's where kind of root's files will be stored

00:44.078 --> 00:48.390
<v Lawrence Angrave>great so how will i get access to that in my c programs

00:48.390 --> 00:50.265
<v Lawrence Angrave>well there's two ways

00:50.265 --> 00:55.000
<v Lawrence Angrave>first of all there's a variable called environ

00:55.000 --> 00:59.406
<v Lawrence Angrave>which if we are running in an older posix environment

00:59.406 --> 01:02.046
<v Lawrence Angrave>we have to specifically declare 

01:02.046 --> 01:09.500
<v Lawrence Angrave>in fact we say look there is somewhere in there is already a variable declared called environ and we just need access to it

01:09.500 --> 01:12.156
<v Lawrence Angrave>so that's what the extern keyword means

01:12.156 --> 01:14.515
<v Lawrence Angrave>we are not trying to say give me additional storage for this

01:14.515 --> 01:17.828
<v Lawrence Angrave>rather that the storage for this environment variable has already been made

01:17.828 --> 01:21.812
<v Lawrence Angrave>and we just want to be able to reference it inside our program

01:21.812 --> 01:24.546
<v Lawrence Angrave>so if i use that

01:24.546 --> 01:27.890
<v Lawrence Angrave>you'll see that it's actually a character pointer pointer

01:27.890 --> 01:30.625
<v Lawrence Angrave>in other words i'm going to dereference it twice

01:30.625 --> 01:33.468
<v Lawrence Angrave>the first time i dereference it

01:33.468 --> 01:38.140
<v Lawrence Angrave>i get a pointer and that pointer itself is going to point to character strings

01:38.140 --> 01:43.515
<v Lawrence Angrave>and i can keep moving along then to print out different environmental variables

01:43.515 --> 01:47.484
<v Lawrence Angrave>so if i had the same kind of pointer 

01:47.484 --> 01:52.843
<v Lawrence Angrave>i'll call it ptr and i initialize it to environ

01:52.843 --> 01:56.531
<v Lawrence Angrave>i could print out the very first one

01:56.531 --> 02:07.656
<v Lawrence Angrave>if i say let me print out a string and a new line and if I do star pointer we can follow that money if you like

02:07.656 --> 02:09.265
<v Lawrence Angrave>we can follow where that pointer points to

02:09.265 --> 02:14.781
<v Lawrence Angrave>so it points to the first entry in this array 

02:14.781 --> 02:18.625
<v Lawrence Angrave>so we can run this and we see i get the first environment variable

02:18.625 --> 02:23.296
<v Lawrence Angrave>which looks like a key or a name followed by an equal sign followed by its value

02:23.296 --> 02:27.140
<v Lawrence Angrave>so if i was to add one to the pointer

02:27.140 --> 02:30.234
<v Lawrence Angrave>then i move on to the next character pointer

02:30.234 --> 02:34.218
<v Lawrence Angrave>and i get the next entry

02:34.218 --> 02:36.140
<v Lawrence Angrave>so let's put that in a loop

02:36.140 --> 02:37.156
<v Lawrence Angrave>how can i do that

02:37.156 --> 02:44.906
<v Lawrence Angrave>well i can say while i might be tempted to write pointer but that's not going to be particularly useful

02:44.906 --> 02:49.968
<v Lawrence Angrave>instead i want to say whilst the thing that pointer is looking at is a non null value

02:49.968 --> 02:53.343
<v Lawrence Angrave>in other words whilst i have a valid pointer

02:53.343 --> 02:59.625
<v Lawrence Angrave>why? because i happen to know that this array has one extra entry at the end which is the null entry

02:59.625 --> 03:01.828
<v Lawrence Angrave>meaning that its got a pointer that points to nothing

03:01.828 --> 03:04.531
<v Lawrence Angrave>and let's also increment our pointer at the end

03:04.531 --> 03:11.031
<v Lawrence Angrave>great so we can run this and get a look at all of the entries

03:11.031 --> 03:15.093
<v Lawrence Angrave>in fact why don't we set a couple of entries here

03:15.093 --> 03:20.187
<v Lawrence Angrave>so export secret to be 123456

03:20.187 --> 03:23.078
<v Lawrence Angrave>let's try that and run our program again

03:23.078 --> 03:25.109
<v Lawrence Angrave>this time when we run it

03:25.109 --> 03:32.640
<v Lawrence Angrave>the environmental variable secret is part of the environment of our running program

03:32.640 --> 03:38.078
<v Lawrence Angrave>if you already know the name of the environment variable that you wish to use

03:38.078 --> 03:40.062
<v Lawrence Angrave>you can get to it directly

03:40.062 --> 03:44.578
<v Lawrence Angrave>so we can also say hey give me the environment variable and give it a name

03:44.578 --> 03:54.031
<v Lawrence Angrave>for example secret and this will give me back a pointer to a character array

03:54.031 --> 03:57.000
<v Lawrence Angrave>oops i better call it secret

03:57.000 --> 03:59.578
<v Lawrence Angrave>let's print it out and quit

03:59.578 --> 04:15.109
<v Lawrence Angrave>so the secret is and we can call exit

04:15.109 --> 04:18.609
<v Lawrence Angrave>great i've got a little program that can print out secrets

04:18.609 --> 04:23.640
<v Lawrence Angrave>so now i can make my program check that the secret is set for example

04:23.640 --> 04:30.937
<v Lawrence Angrave>for example if I try to get an environmental variable that doesn't exist

04:30.937 --> 04:35.468
<v Lawrence Angrave>then my pointer is actually going to be nil

04:35.468 --> 04:36.968
<v Lawrence Angrave>let me show you that

04:36.968 --> 04:44.593
<v Lawrence Angrave>let me try to print out the value of secret as an integer

04:44.593 --> 04:48.812
<v Lawrence Angrave>so my secret pointer is pointing to nothing

04:48.812 --> 04:50.812
<v Lawrence Angrave>we didn't set that environmental variable yet

04:50.812 --> 05:01.187
<v Lawrence Angrave>so we for example i could say look if secret is null then i'm not going to let this program run

05:01.187 --> 05:05.812
<v Lawrence Angrave>i am just going to stop

05:05.812 --> 05:18.015
<v Lawrence Angrave>so we'll stop and let's now change it so that very secret is something like abc

05:18.015 --> 05:30.437
<v Lawrence Angrave>and when we run the program again this time you'll see that secret is a valid integer value so that's just an integer representation of the pointer

05:30.437 --> 05:37.796
<v Lawrence Angrave>and we got back at that memory location the contents of that environment variable ABC

05:37.796 --> 05:39.765
<v Lawrence Angrave>okay that's enough for me now it's time for you to play

05:39.765 --> 05:40.546
<v Lawrence Angrave>bye

