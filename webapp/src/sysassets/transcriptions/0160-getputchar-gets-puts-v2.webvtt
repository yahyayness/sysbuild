WEBVTT

00:00.000 --> 00:01.015
<v Lawrence Angrave>hello welcome

00:01.015 --> 00:05.218
<v Lawrence Angrave>let's talk about how we can get single characters and print them out in c

00:05.218 --> 00:08.875
<v Lawrence Angrave>so here's some functions defined in std.io

00:08.875 --> 00:15.156
<v Lawrence Angrave>i can say give me a single character for example and why don't I just keep calling this

00:15.156 --> 00:24.406
<v Lawrence Angrave>so i could just say while getchar is not equal to a special constant called end of file (EOF) keep going around in a loop

00:24.406 --> 00:28.062
<v Lawrence Angrave>but if I actually want to print them out I better actually store the value of getchar

00:28.062 --> 00:36.593
<v Lawrence Angrave>so let's have an integer value called c and inside my while condition I'm actually going to assign the result into c

00:36.593 --> 00:46.671
<v Lawrence Angrave>so you'll often see this pattern inside systems programming where we take a systems call or a library call and we store the results inside a variable

00:46.671 --> 00:56.718
<v Lawrence Angrave>but because that may also signify an error condition or a termination condition we use it immediately to check inside part of a while loop or an if statement

00:56.718 --> 01:00.718
<v Lawrence Angrave>so we've got a little character loop here that is going to keep going until it gets to the end of the file

01:00.718 --> 01:02.187
<v Lawrence Angrave>so now I want to print it out

01:02.187 --> 01:05.609
<v Lawrence Angrave>guess what i can call putchar and we'll see that running 

01:05.609 --> 01:09.765
<v Lawrence Angrave>so let's run this little program

01:09.765 --> 01:11.203
<v Lawrence Angrave>ABCD

01:11.203 --> 01:13.531
<v Lawrence Angrave>it prints back ABCD

01:13.531 --> 01:17.828
<v Lawrence Angrave>okay so we don't have to display the character just as a character

01:17.828 --> 01:21.843
<v Lawrence Angrave>we can display it as a character an integer and hexdecimal values

01:21.843 --> 01:23.343
<v Lawrence Angrave>so let's use printf for that

01:23.343 --> 01:29.250
<v Lawrence Angrave>so I've got %c %d and %c for character integer and hexadecimal value

01:29.250 --> 01:34.343
<v Lawrence Angrave>alright so let's run this

01:34.343 --> 01:40.390
<v Lawrence Angrave>and you can see that the letter A corresponds to sixty five which is in hexadecimal forty one

01:40.390 --> 01:47.187
<v Lawrence Angrave>right so why don't we use our little program to print out the contents of another file

01:47.187 --> 01:51.781
<v Lawrence Angrave>so if I cat my source code I can see the contents of that

01:51.781 --> 01:56.078
<v Lawrence Angrave>great so I'm going to pipe it into my program

01:56.078 --> 02:04.328
<v Lawrence Angrave>so i'll do ./program and it reads every byte and prints it out as a character

02:04.328 --> 02:12.687
<v Lawrence Angrave>great so let's encrypt our file now so I'm going to modify our value of c if it's not a newline character

02:12.687 --> 02:20.062
<v Lawrence Angrave>so what we'll do is say if c is at least thirty two in other words at least a space an ascii space

02:20.062 --> 02:26.062
<v Lawrence Angrave>and if it is we will change the lowest bit

02:26.062 --> 02:27.046
<v Lawrence Angrave>we'll flip the lowest bit

02:27.046 --> 02:28.078
<v Lawrence Angrave>how can we do that

02:28.078 --> 02:30.750
<v Lawrence Angrave>let's xor it with one

02:30.750 --> 02:33.078
<v Lawrence Angrave>right and then we'll print it out

02:33.078 --> 02:35.796
<v Lawrence Angrave>okay so we'll run this

02:35.796 --> 02:40.218
<v Lawrence Angrave>CDE for example and it changed the C to a B

02:40.218 --> 02:44.218
<v Lawrence Angrave>and if I do 135 I get 024

02:44.218 --> 02:50.093
<v Lawrence Angrave>so to say that I've got to the end of the file when I'm just typing you by the way you can do control d

02:50.093 --> 02:53.656
<v Lawrence Angrave>now see this working on some actual source code

02:53.656 --> 03:01.875
<v Lawrence Angrave>so let's here some text my program.c and i'm going to pipe that into my program to use as its input

03:01.875 --> 03:06.031
<v Lawrence Angrave>and you can see great we've garbled the program

03:06.031 --> 03:13.000
<v Lawrence Angrave>so if I want to I can then take that output and pipe it into my program again

03:13.000 --> 03:17.078
<v Lawrence Angrave>so now i'm going to unencrypt it because i flipped the lowest bit back  

03:17.078 --> 03:19.187
<v Lawrence Angrave>so we get back our source code

03:19.187 --> 03:25.031
<v Lawrence Angrave>so that's getchar and putchar i can also work with whole lines

03:25.031 --> 03:40.640
<v Lawrence Angrave>i can let's get rid of the loop here i can say puts hello or any pointer to a character array provided its terminated by a zero byte at the end

03:40.640 --> 03:49.421
<v Lawrence Angrave>and that is equivalent to printf by saying %s and \n at the end

03:49.421 --> 03:53.812
<v Lawrence Angrave>so i've got some character pointer here

03:53.812 --> 04:01.343
<v Lawrence Angrave>right so it's a little bit shorter to type than writing printf

04:01.343 --> 04:04.890
<v Lawrence Angrave>there is the opposite which is to get some input

04:04.890 --> 04:11.046
<v Lawrence Angrave>but this has a problem and we'll see why in a moment why this function actually call is being removed from the c standard

04:11.046 --> 04:21.203
<v Lawrence Angrave>i'm talking about gets so let's call gets and we will have a little buffer here

04:21.203 --> 04:24.156
<v Lawrence Angrave>so let's put a little buffer on the stack here

04:24.156 --> 04:25.890
<v Lawrence Angrave>i'll make it twelve bytes today 

04:25.890 --> 04:32.671
<v Lawrence Angrave>and remember when we call gets with buffer if you use the array name you are talking about the very first byte of the array

04:32.671 --> 04:35.437
<v Lawrence Angrave>and rather than printing out hello

04:35.437 --> 04:37.609
<v Lawrence Angrave>we will print out our buffer value

04:37.609 --> 04:45.593
<v Lawrence Angrave>so let's run this and we can type something in and it echos it back to us

04:45.593 --> 04:49.718
<v Lawrence Angrave>fantastic but what happens if we enter more than twelve bytes

04:49.718 --> 04:53.609
<v Lawrence Angrave>so in other words could something bad happen to our other variables

04:53.609 --> 04:59.156
<v Lawrence Angrave>well yes it could because if we go past twelve bytes we start writing into memory which is used for other purposes

04:59.156 --> 05:05.093
<v Lawrence Angrave>for example in my little program the integer is immediately after the buffer

05:05.093 --> 05:11.718
<v Lawrence Angrave>let's prove this let's set our hex value of c to be ten twenty thirty fourty

05:11.718 --> 05:20.875
<v Lawrence Angrave>let me print that out after we've called gets i'm going to print it again

05:20.875 --> 05:28.328
<v Lawrence Angrave>so we've got to remember that what we store is going to be our letters plus a null byte

05:28.328 --> 05:40.796
<v Lawrence Angrave>so in this case if I do ABCDABCDABCD I've already overflowed because the thirteenth byte is now going to be written into my integer

05:40.796 --> 05:45.437
<v Lawrence Angrave>but i am going to do just a few more I'll do ABCD there we go

05:45.437 --> 05:51.906
<v Lawrence Angrave>and we'll see that I've managed to change my integer value to 41424344

05:51.906 --> 05:56.265
<v Lawrence Angrave>so the last ABC that I wrote in there actually overran my buffer

05:56.265 --> 06:00.984
<v Lawrence Angrave>i've got a buffer overflow and I've corrupted the contents of another variable

06:00.984 --> 06:02.687
<v Lawrence Angrave>so that's why gets is dangerous

06:02.687 --> 06:09.281
<v Lawrence Angrave>there's no way to tell gets that we shouldn't accept input that is too long for it

06:09.281 --> 06:18.468
<v Lawrence Angrave>so in a future video i'll tell you about getline and also fgets which don't suffer from these problems

06:18.468 --> 06:22.703
<v Lawrence Angrave>okay that's it for me thanks for watching and i'll see you in another video. bye!

